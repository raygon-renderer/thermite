(function() {var implementors = {};
implementors["thermite"] = [{"text":"impl Div&lt;f32x8&lt;AVX2&gt;&gt; for f32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;f64x8&lt;AVX2&gt;&gt; for f64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;Divider&lt;i32&gt;&gt; for i32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;BranchfreeDivider&lt;i32&gt;&gt; for i32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;i32x8&lt;AVX2&gt;&gt; for i32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;Divider&lt;i64&gt;&gt; for i64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;BranchfreeDivider&lt;i64&gt;&gt; for i64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;i64x8&lt;AVX2&gt;&gt; for i64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;Divider&lt;u32&gt;&gt; for u32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;BranchfreeDivider&lt;u32&gt;&gt; for u32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;u32x8&lt;AVX2&gt;&gt; for u32x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;Divider&lt;u64&gt;&gt; for u64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;BranchfreeDivider&lt;u64&gt;&gt; for u64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl Div&lt;u64x8&lt;AVX2&gt;&gt; for u64x8&lt;AVX2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Simd, V:&nbsp;SimdFloatVector&lt;S&gt;, P:&nbsp;Policy&gt; Div&lt;Complex&lt;S, V, P&gt;&gt; for Complex&lt;S, V, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: SimdVectorizedMath&lt;S&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()