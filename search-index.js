var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[0,"arch","thermite","Organized target-feature intrinsics",null,null],[0,"sse","thermite::arch","",null,null],[3,"__m128","thermite::arch::sse","128-bit wide set of four <code>f32</code> types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two <code>f64</code> types, x86-specific",null,null],[3,"__m128i","","128-bit wide integer vector type, x86-specific",null,null],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see …",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see …",null,null],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_add_ss","","Adds the first component of <code>a</code> and <code>b</code>, the other components …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ss","","Compares the lowest <code>f32</code> of both inputs for equality. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ss","","Compares the lowest <code>f32</code> of both inputs for greater than …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ss","","Compares the lowest <code>f32</code> of both inputs for greater than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ss","","Compares the lowest <code>f32</code> of both inputs for less than or …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ss","","Compares the lowest <code>f32</code> of both inputs for less than. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ss","","Compares the lowest <code>f32</code> of both inputs for inequality. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ss","","Compares the lowest <code>f32</code> of both inputs for …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ss","","Compares the lowest <code>f32</code> of both inputs for not-less-than. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ss","","Checks if the lowest <code>f32</code> of both inputs are ordered. The …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in <code>a</code> to the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ss","","Checks if the lowest <code>f32</code> of both inputs are unordered. …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_cvt_si2ss","","Alias for <code>_mm_cvtsi32_ss</code>.",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_cvt_ss2si","","Alias for <code>_mm_cvtss_si32</code>.",null,[[["__m128",3]],["i32",15]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128",3]],["f32",15]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_cvtt_ss2si","","Alias for <code>_mm_cvttss_si32</code>.",null,[[["__m128",3]],["i32",15]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ss","","Divides the first component of <code>b</code> by <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_load_ps","","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …",null,[[],["__m128",3]]],[5,"_mm_load_ps1","","Alias for <code>_mm_load1_ps</code>",null,[[],["__m128",3]]],[5,"_mm_load_ss","","Construct a <code>__m128</code> with the lowest element read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_load1_ps","","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …",null,[[],["__m128",3]]],[5,"_mm_loadr_ps","","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> …",null,[[],["__m128",3]]],[5,"_mm_loadu_ps","","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There …",null,[[],["__m128",3]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_move_ss","","Returns a <code>__m128</code> with the first component from <code>b</code> and the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movehl_ps","","Combine higher half of <code>a</code> and <code>b</code>. The highwe half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movelh_ps","","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ss","","Multiplies the first component of <code>a</code> and <code>b</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_prefetch","","Fetch the cache line that contains address <code>p</code> using the …",null,[[["i32",15]]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_set_ps","","Construct a <code>__m128</code> from four floating point values …",null,[[["f32",15]],["__m128",3]]],[5,"_mm_set_ps1","","Alias for <code>_mm_set1_ps</code>",null,[[["f32",15]],["__m128",3]]],[5,"_mm_set_ss","","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …",null,[[["f32",15]],["__m128",3]]],[5,"_mm_set1_ps","","Construct a <code>__m128</code> with all element set to <code>a</code>.",null,[[["f32",15]],["__m128",3]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer …",null,[[["u32",15]]]],[5,"_mm_setr_ps","","Construct a <code>__m128</code> from four floating point values lowest …",null,[[["f32",15]],["__m128",3]]],[5,"_mm_setzero_ps","","Construct a <code>__m128</code> with all elements initialized to zero.",null,[[],["__m128",3]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory …",null,[[]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_store_ps","","Stores four 32-bit floats into <em>aligned</em> memory.",null,[[["__m128",3]]]],[5,"_mm_store_ps1","","Alias for <code>_mm_store1_ps</code>",null,[[["__m128",3]]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of <code>a</code> into memory.",null,[[["__m128",3]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of <code>a</code> repeated four times …",null,[[["__m128",3]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into <em>aligned</em> memory in reverse …",null,[[["__m128",3]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no …",null,[[["__m128",3]]]],[5,"_mm_stream_ps","","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …",null,[[["__m128",3]]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ss","","Subtracts the first component of <code>b</code> from <code>a</code>, the other …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of <code>a</code> …",null,[[["__m128",3]],["i32",15]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128",3]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtsi64_ss","","Converts a 64 bit integer to a 32 bit float. The result …",null,[[["i64",15],["__m128",3]],["__m128",3]]],[5,"_mm_cvtss_si64","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]],["i64",15]]],[5,"_mm_cvttss_si64","","Converts the lowest 32 bit float in the input vector to a …",null,[[["__m128",3]],["i64",15]]],[5,"_mm_loadu_si64","","Loads unaligned 64-bits of integer data from memory into …",null,[[],["__m128i",3]]],[0,"sse2","thermite::arch","",null,null],[5,"_mm_add_epi16","thermite::arch::sse2","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_add_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bslli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_bsrli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of <code>[2 x double]</code> …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains <code>p</code> …",null,[[]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_comige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_comigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_comile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_comilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_comineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) …",null,[[["__m128d",3]],["f64",15]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128",3]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_cvtsi128_si64","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]],["i64",15]]],[5,"_mm_cvtsi128_si64x","","Returns the lowest element of <code>a</code>.",null,[[["__m128i",3]],["i64",15]]],[5,"_mm_cvtsi32_sd","","Returns <code>a</code> with its lower element replaced by <code>b</code> after …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[["i32",15]],["__m128i",3]]],[5,"_mm_cvtsi64x_si128","","Returns a vector whose lowest element is <code>a</code> and all higher …",null,[[["i64",15]],["__m128i",3]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit) …",null,[[["__m128",3],["__m128d",3]],["__m128d",3]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_cvttsd_si64","","Converts the lower double-precision (64-bit) …",null,[[["__m128d",3]],["i64",15]]],[5,"_mm_cvttsd_si64x","","Alias for <code>_mm_cvttsd_si64</code>",null,[[["__m128d",3]],["i64",15]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_extract_epi16","","Returns the <code>imm8</code> element of <code>a</code>.",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_insert_epi16","","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element …",null,[[],["__m128d",3]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of …",null,[[],["__m128i",3]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements …",null,[[],["__m128d",3]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision …",null,[[],["__m128d",3]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new …",null,[[],["__m128i",3]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from <code>a</code> into …",null,[[["__m128i",3]]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory …",null,[[]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from <code>a</code>…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_or_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence …",null,[[]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[["i16",15]],["__m128i",3]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[["i32",15]],["__m128i",3]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, …",null,[[["i64",15]],["__m128i",3]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[["i8",15]],["__m128i",3]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[["f64",15]],["__m128d",3]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value …",null,[[["f64",15]],["__m128d",3]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element <code>a</code> …",null,[[["f64",15]],["__m128d",3]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all elements.",null,[[["i16",15]],["__m128i",3]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements.",null,[[["i32",15]],["__m128i",3]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements.",null,[[["i64",15]],["__m128i",3]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements.",null,[[["i8",15]],["__m128i",3]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[["f64",15]],["__m128d",3]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in …",null,[[["i16",15]],["__m128i",3]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in …",null,[[["i32",15]],["__m128i",3]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in …",null,[[["i8",15]],["__m128i",3]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[["f64",15]],["__m128d",3]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point …",null,[[],["__m128d",3]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i",3]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in <code>a</code> using the control in <code>imm8</code>.",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_slli_si128","","Shifts <code>a</code> left by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_srli_si128","","Shifts <code>a</code> right by <code>imm8</code> bytes while shifting in zeros.",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer <code>a</code> to a memory location.",null,[[["__m128i",3]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of …",null,[[["__m128d",3]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point …",null,[[["__m128d",3]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision …",null,[[["__m128d",3]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from <code>a</code> into memory.",null,[[["__m128i",3]]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …",null,[[["__m128d",3]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned …",null,[[["__m128i",3]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory …",null,[[["i32",15]]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory …",null,[[["i64",15]]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of <code>a</code> replaced …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_ucomieq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for equality.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_ucomige_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_ucomigt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_ucomile_sd","","Compares the lower element of <code>a</code> and <code>b</code> for …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_ucomilt_sd","","Compares the lower element of <code>a</code> and <code>b</code> for less-than.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_ucomineq_sd","","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.",null,[[["__m128d",3]],["i32",15]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d",3]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i",3]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_pd","","The resulting <code>__m128d</code> element is composed by the …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_pd","","Computes the bitwise OR of <code>a</code> and <code>b</code>.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing …",null,[[["__m128i",3]],["__m128i",3]]],[0,"sse3","thermite::arch","",null,null],[5,"_mm_addsub_pd","thermite::arch::sse3","Alternatively add and subtract packed double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. …",null,[[],["__m128i",3]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element …",null,[[],["__m128d",3]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[0,"ssse3","thermite::arch","",null,null],[5,"_mm_abs_epi16","thermite::arch::ssse3","Computes the absolute value of each of the packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m128i",3]],["__m128i",3]]],[0,"sse41","thermite::arch","",null,null],[5,"_mm_blend_epi16","thermite::arch::sse41","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from <code>a</code> selected with <code>imm8</code>",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_extract_epi64","","Extracts an 64-bit integer from <code>a</code> selected with <code>imm8</code>",null,[[["__m128i",3],["i32",15]],["i64",15]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["i32",15]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_insert_epi32","","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_insert_epi64","","Returns a copy of <code>a</code> with the 64-bit integer from <code>i</code> …",null,[[["i64",15],["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_insert_epi8","","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_insert_ps","","Select a single value in <code>a</code> to store at some position in <code>b</code>,…",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit _…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in <code>a</code> 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer …",null,[[["__m128i",3]],["i32",15]]],[0,"sse42","thermite::arch","",null,null],[5,"_mm_cmpestra","thermite::arch::sse42","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpestrc","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpestri","","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpestrm","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_cmpestro","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpestrs","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpestrz","","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …",null,[[["__m128i",3],["i32",15]],["i32",15]]],[5,"_mm_crc32_u16","","Starting with the initial value in <code>crc</code>, return the …",null,[[["u32",15],["u16",15]],["u32",15]]],[5,"_mm_crc32_u32","","Starting with the initial value in <code>crc</code>, return the …",null,[[["u32",15]],["u32",15]]],[5,"_mm_crc32_u64","","Starting with the initial value in <code>crc</code>, return the …",null,[[["u64",15]],["u64",15]]],[5,"_mm_crc32_u8","","Starting with the initial value in <code>crc</code>, return the …",null,[[["u32",15],["u8",15]],["u32",15]]],[0,"f16c","thermite::arch","",null,null],[0,"avx","","",null,null],[3,"__m256","thermite::arch::avx","256-bit wide set of eight <code>f32</code> types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four <code>f64</code> types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point …",null,[[["f64",15]],["__m256d",3]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[["f32",15]],["__m128",3]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point …",null,[[["f32",15]],["__m256",3]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d",3]],["__m256",3]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d",3]],["__m256i",3]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256",3]],["__m256d",3]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128 …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit) …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit) …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in <code>a</code> to packed …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128",3]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m128",3]],["__m256d",3]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of …",null,[[["__m256d",3]],["f64",15]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of <code>[8 x i32]</code>…",null,[[["__m256i",3]],["i32",15]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of …",null,[[["__m256",3]],["f32",15]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from <code>a</code>, selected with <code>imm8</code>.",null,[[["i32",15],["__m256i",3]],["i32",15]]],[5,"_mm256_extract_epi64","","Extracts a 64-bit integer from <code>a</code>, selected with <code>imm8</code>.",null,[[["i32",15],["__m256i",3]],["i64",15]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision …",null,[[["__m256d",3],["i32",15]],["__m128d",3]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision …",null,[[["i32",15],["__m256",3]],["__m128",3]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from <code>a</code>, …",null,[[["i32",15],["__m256i",3]],["__m128i",3]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_insert_epi16","","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …",null,[[["i32",15],["i16",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi32","","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi64","","Copies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …",null,[[["i64",15],["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi8","","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …",null,[[["i8",15],["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_insertf128_pd","","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …",null,[[["i32",15],["__m256d",3],["__m128d",3]],["__m256d",3]]],[5,"_mm256_insertf128_ps","","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …",null,[[["i32",15],["__m128",3],["__m256",3]],["__m256",3]]],[5,"_mm256_insertf128_si256","","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …",null,[[["i32",15],["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into …",null,[[],["__m256i",3]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision …",null,[[],["__m256d",3]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision …",null,[[],["__m256",3]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result. …",null,[[],["__m256i",3]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed …",null,[[],["__m256",3]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed …",null,[[],["__m256d",3]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from …",null,[[],["__m256i",3]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point …",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point …",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m128i",3],["__m128d",3]]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point …",null,[[["__m256d",3],["__m256i",3]]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m128i",3],["__m128",3]]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point …",null,[[["__m256i",3],["__m256",3]]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most …",null,[[["__m256d",3]],["i32",15]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most …",null,[[["__m256",3]],["i32",15]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["i32",15],["__m128d",3]],["__m128d",3]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128",3],["i32",15]],["__m128",3]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_si256","","Shuffles 128-bits (composed of integer data) selected by …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m128i",3],["__m128d",3]],["__m128d",3]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3],["__m256i",3]],["__m256d",3]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m128i",3],["__m128",3]],["__m128",3]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["__m256i",3],["__m256",3]],["__m256",3]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[["i16",15]],["__m256i",3]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[["i32",15]],["__m256i",3]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[["i64",15]],["__m256i",3]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[["i8",15]],["__m256i",3]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[["f64",15]],["__m256d",3]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[["f32",15]],["__m256",3]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer <code>a</code> to all all elements of …",null,[[["i16",15]],["__m256i",3]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer <code>a</code> to all elements of returned …",null,[[["i32",15]],["__m256i",3]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer <code>a</code> to all elements of returned …",null,[[["i64",15]],["__m256i",3]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer <code>a</code> to all elements of returned …",null,[[["i8",15]],["__m256i",3]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value …",null,[[["f64",15]],["__m256d",3]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value …",null,[[["f32",15]],["__m256",3]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the …",null,[[["i16",15]],["__m256i",3]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the …",null,[[["i32",15]],["__m256i",3]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the …",null,[[["i64",15]],["__m256i",3]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the …",null,[[["i8",15]],["__m256i",3]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point …",null,[[["f64",15]],["__m256d",3]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point …",null,[[["f32",15]],["__m256",3]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to …",null,[[],["__m256d",3]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to …",null,[[],["__m256",3]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to …",null,[[],["__m256i",3]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point …",null,[[["i32",15],["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision …",null,[[["__m256d",3]]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision …",null,[[["__m256",3]]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from <code>a</code> into memory. …",null,[[["__m256i",3]]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256",3]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256d",3]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of …",null,[[["__m256i",3]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of …",null,[[["__m256d",3]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a …",null,[[["__m256",3]]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a …",null,[[["__m256i",3]]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]],["i32",15]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]],["i32",15]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]],["i32",15]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["i32",15]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]],["i32",15]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]],["i32",15]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]],["i32",15]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["i32",15]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128d",3]],["i32",15]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256d",3]],["i32",15]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing …",null,[[["__m128",3]],["i32",15]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256",3]],["i32",15]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["i32",15]]],[5,"_mm256_undefined_pd","","Returns vector of type <code>__m256d</code> with undefined elements.",null,[[],["__m256d",3]]],[5,"_mm256_undefined_ps","","Returns vector of type <code>__m256</code> with undefined elements.",null,[[],["__m256",3]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i",3]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower …",null,[[]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of <code>[4 x double]</code>…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[0,"fma","thermite::arch","",null,null],[5,"_mm_fmadd_pd","thermite::arch::fma","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) …",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) …",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[0,"avx2","thermite::arch","",null,null],[5,"_mm256_abs_epi16","thermite::arch::avx2","Computes the absolute values of packed 16-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in <code>a</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from <code>a</code> to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit) …",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit) …",null,[[["__m128",3]],["__m256",3]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> …",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["i32",15],["__m256i",3]],["i32",15]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from <code>a</code>, selected with <code>imm8</code>. …",null,[[["i32",15],["__m256i",3]],["i32",15]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from <code>a</code> selected with …",null,[[["i32",15],["__m256i",3]],["__m128i",3]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm256_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm256_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["i32",15],["__m128i",3]],["__m256i",3]]],[5,"_mm_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128d",3]]],[5,"_mm_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["i32",15],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m256d",3]]],[5,"_mm256_mask_i32gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256d",3],["__m128i",3]],["__m256d",3]]],[5,"_mm_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128",3]]],[5,"_mm_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["i32",15],["__m128i",3]],["__m128",3]]],[5,"_mm256_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256",3]]],[5,"_mm256_mask_i32gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["__m256",3],["i32",15]],["__m256",3]]],[5,"_mm_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm256_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m128i",3]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["i32",15],["__m128i",3]],["__m128i",3]]],[5,"_mm_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128i",3]]],[5,"_mm256_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128d",3]]],[5,"_mm_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128d",3],["i32",15],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m256d",3]]],[5,"_mm256_mask_i64gather_pd","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m256i",3],["i32",15],["__m256d",3]],["__m256d",3]]],[5,"_mm_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128i",3],["i32",15]],["__m128",3]]],[5,"_mm_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["i32",15],["__m128i",3]],["__m128",3]]],[5,"_mm256_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["i32",15],["__m256i",3]],["__m128",3]]],[5,"_mm256_mask_i64gather_ps","","Returns values from <code>slice</code> at offsets determined by …",null,[[["__m128",3],["__m256i",3],["i32",15]],["__m128",3]]],[5,"_mm256_inserti128_si256","","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …",null,[[["i32",15],["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from <code>a</code> into memory pointed …",null,[[["__m256i",3]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit …",null,[[["__m256i",3]],["i32",15]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …",null,[[["__m256d",3],["i32",15]],["__m256d",3]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from <code>a</code> according to the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in <code>a</code> across …",null,[[["__m256i",3],["__m256",3]],["__m256",3]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in <code>a</code> when the …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in <code>a</code> when the corresponding …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in <code>a</code> left by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in <code>a</code> left by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in <code>a</code> right by <code>imm8</code> while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …",null,[[["i32",15],["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in <code>a</code> right by the amount …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half …",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing …",null,[[["__m256i",3]],["__m256i",3]]],[0,"backends","thermite","",null,null],[0,"polyfills","thermite::backends","",null,null],[5,"_mm_shuffle","thermite::backends::polyfills","",null,[[["i32",15]],["i32",15]]],[0,"avx1","thermite::backends","",null,null],[3,"AVX1","thermite::backends::avx1","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"f32x8","thermite::backends::avx2","",null,null],[3,"f64x8","","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[3,"AVX2","","",null,null],[0,"sse2","thermite::backends","",null,null],[0,"sse42","","",null,null],[0,"element","thermite","",null,null],[8,"SimdElement","thermite::element","Umbrella trait for SIMD vector element bounds",null,null],[8,"CastFrom","","",null,null],[10,"cast_from","","",0,[[]]],[8,"CastFromAll","","",null,null],[0,"math","thermite","Vectorized Math Library",null,null],[0,"compensated","thermite::math","",null,null],[3,"Compensated","thermite::math::compensated","",null,null],[12,"val","","",1,null],[12,"err","","",1,null],[11,"new","","",1,[[]]],[11,"value","","",1,[[]]],[11,"product","","",1,[[]]],[11,"sum","","",1,[[]]],[0,"poly","thermite::math","Optimized fixed-degree polynomial evaluation",null,null],[5,"poly_1","thermite::math::poly","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_2","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_3","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_4","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_5","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_6","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_7","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_8","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_9","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_10","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_11","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_12","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_13","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_14","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_15","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_30","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[0,"policies","thermite::math","Execution Policies (precision, performance, etc.)",null,null],[3,"ExtraPrecision","thermite::math::policies","Policy adapter that increases the precision requires by …",null,null],[3,"UltraPerformance","","Optimize for performance at the cost of precision and …",null,null],[3,"Performance","","Optimize for performance, ideally without losing …",null,null],[3,"Precision","","Optimize for precision, at the cost of performance if …",null,null],[3,"Size","","Optimize for code size, avoids hard-coded equations or …",null,null],[3,"Reference","","Calculates a reference value for operations where …",null,null],[8,"Policy","thermite::math","Execution policy used for controlling …",null,null],[18,"POLICY","","The specific policy used. This is a constant to allow for …",2,null],[4,"PrecisionPolicy","","Precision Policy, tradeoffs between precision and …",null,null],[13,"Worst","","Precision is not important, so prefer simpler or faster …",3,null],[13,"Average","","Precision is important, but not the focus, so avoid …",3,null],[13,"Best","","Precision is very important, so do everything to improve …",3,null],[13,"Reference","","Precision is the only factor, use infinite sums to …",3,null],[3,"PolicyParameters","","Customizable Policy Parameters",null,null],[12,"check_overflow","","If true, methods will check for infinity/NaN/invalid …",4,null],[12,"unroll_loops","","If true, unrolled and optimized versions of some …",4,null],[12,"precision","","Controls if precision should be emphasized or …",4,null],[12,"avoid_branching","","If true, methods will not try to avoid extra work by …",4,null],[12,"max_series_iterations","","Some special functions require many, many iterations of a …",4,null],[11,"avoid_precision_branches","","Returns true if the policy says to avoid branches at the …",4,[[],["bool",15]]],[6,"DefaultPolicy","","",null,null],[8,"SimdVectorizedMathPolicied","","Set of vectorized special functions allowing specific …",null,null],[10,"scale_p","","",5,[[]]],[10,"lerp_p","","",5,[[]]],[10,"fmod_p","","",5,[[]]],[10,"hypot_p","","",5,[[]]],[10,"poly_p","","",5,[[]]],[10,"poly_rational_p","","",5,[[]]],[10,"poly_f_p","","",5,[[["usize",15]]]],[10,"summation_f_p","","",5,[[["isize",15]],["result",4]]],[10,"product_f_p","","",5,[[["isize",15]],["result",4]]],[10,"sin_p","","",5,[[]]],[10,"cos_p","","",5,[[]]],[10,"tan_p","","",5,[[]]],[10,"sin_cos_p","","",5,[[]]],[10,"sinh_p","","",5,[[]]],[10,"cosh_p","","",5,[[]]],[10,"tanh_p","","",5,[[]]],[10,"asinh_p","","",5,[[]]],[10,"acosh_p","","",5,[[]]],[10,"atanh_p","","",5,[[]]],[10,"asin_p","","",5,[[]]],[10,"acos_p","","",5,[[]]],[10,"atan_p","","",5,[[]]],[10,"atan2_p","","",5,[[]]],[10,"exp_p","","",5,[[]]],[10,"exph_p","","",5,[[]]],[10,"exp2_p","","",5,[[]]],[10,"exp10_p","","",5,[[]]],[10,"exp_m1_p","","",5,[[]]],[10,"cbrt_p","","",5,[[]]],[10,"invsqrt_p","","",5,[[]]],[10,"reciprocal_p","","",5,[[]]],[10,"powf_p","","",5,[[]]],[10,"powiv_p","","",5,[[]]],[10,"powi_p","","",5,[[["i32",15]]]],[10,"ln_p","","",5,[[]]],[10,"ln_1p_p","","",5,[[]]],[10,"log2_p","","",5,[[]]],[10,"log10_p","","",5,[[]]],[10,"erf_p","","",5,[[]]],[10,"erfinv_p","","",5,[[]]],[10,"next_float_p","","",5,[[]]],[10,"prev_float_p","","",5,[[]]],[10,"smoothstep_p","","",5,[[]]],[10,"smootherstep_p","","",5,[[]]],[10,"smootheststep_p","","",5,[[]]],[8,"SimdVectorizedMath","","Set of vectorized special functions optimized for both …",null,null],[10,"scale","","Scales values between <code>in_min</code> and <code>in_max</code>, to between …",6,[[]]],[10,"lerp","","Linearly interpolates between <code>a</code> and <code>b</code> using <code>self</code>",6,[[]]],[10,"fmod","","Returns the floating-point remainder of <code>self / y</code> (rounded …",6,[[]]],[10,"hypot","","Computes <code>sqrt(x * x + y * y)</code> for each element of the …",6,[[]]],[10,"poly","","Computes the sum <code>Σ(coefficients[i] * x^i)</code> from <code>i=0</code> to …",6,[[]]],[10,"poly_rational","","Computes …",6,[[]]],[10,"poly_f","","Computes the sum <code>Σ(f(i)*x^i)</code> from <code>i=0</code> to <code>n</code>",6,[[["usize",15]]]],[10,"summation_f","","Computes <code>Σ[f(n)]</code> from <code>n=start</code> to <code>end</code>.",6,[[["isize",15]],["result",4]]],[10,"product_f","","Computes <code>Π[f(n)]</code> from <code>n=start</code> to <code>end</code>.",6,[[["isize",15]],["result",4]]],[10,"sin","","Computes the sine of a vector.",6,[[]]],[10,"cos","","Computes the cosine of a vector.",6,[[]]],[10,"tan","","Computes the tangent of a vector.",6,[[]]],[10,"sin_cos","","Computes both the sine and cosine of a vector together …",6,[[]]],[10,"sinh","","Computes the hyperbolic-sine of a vector.",6,[[]]],[10,"cosh","","Computes the hyperbolic-cosine of a vector.",6,[[]]],[10,"tanh","","Computes the hyperbolic-tangent of a vector.",6,[[]]],[10,"asinh","","Computes the hyperbolic-arcsine of a vector.",6,[[]]],[10,"acosh","","Computes the hyperbolic-arccosine of a vector.",6,[[]]],[10,"atanh","","Computes the hyperbolic-arctangent of a vector.",6,[[]]],[10,"asin","","Computes the arcsine of a vector.",6,[[]]],[10,"acos","","Computes the arccosine of a vector.",6,[[]]],[10,"atan","","Computes the arctangent of a vector.",6,[[]]],[10,"atan2","","Computes the four quadrant arc-tangent of <code>y</code>(<code>self</code>) and <code>x</code>",6,[[]]],[10,"exp","","The exponential function, returns <code>e^(self)</code>",6,[[]]],[10,"exph","","Half-exponential function, returns <code>0.5 * e^(self)</code>",6,[[]]],[10,"exp2","","Binary exponential function, returns <code>2^(self)</code>",6,[[]]],[10,"exp10","","Base-10 exponential function, returns <code>10^(self)</code>",6,[[]]],[10,"exp_m1","","Exponential function minus one, <code>e^(self) - 1.0</code>, special …",6,[[]]],[10,"cbrt","","Computes the cubic-root of each lane in a vector.",6,[[]]],[10,"invsqrt","","Computes the approximate inverse square root (<code>1/sqrt(x)</code>)",6,[[]]],[10,"reciprocal","","Computes the approximate reciprocal <code>1/x</code> variation, which …",6,[[]]],[10,"powf","","Computes <code>x^e</code> where <code>x</code> is <code>self</code> and <code>e</code> is a vector of …",6,[[]]],[10,"powiv","","Computes <code>x^e</code> where <code>x</code> is <code>self</code> and <code>e</code> is a vector of integer …",6,[[]]],[10,"powi","","Computes <code>x^e</code> where <code>x</code> is <code>self</code> and <code>e</code> is a signed integer",6,[[["i32",15]]]],[10,"ln","","Computes the natural logarithm of a vector.",6,[[]]],[10,"ln_1p","","Computes <code>ln(1+x)</code> where <code>x</code> is <code>self</code>, more accurately than if …",6,[[]]],[10,"log2","","Computes the base-2 logarithm of a vector",6,[[]]],[10,"log10","","Computes the base-10 logarithm of a vector",6,[[]]],[10,"erf","","Computes the error function for each value in a vector.",6,[[]]],[10,"erfinv","","Computes the inverse error function for each value in a …",6,[[]]],[10,"next_float","","Finds the next representable float moving upwards to …",6,[[]]],[10,"prev_float","","Finds the previous representable float moving downwards …",6,[[]]],[10,"smoothstep","","Calculates a sigmoid-like 3rd-order interpolation function…",6,[[]]],[10,"smootherstep","","Calculates a sigmoid-like 5th-order interpolation function…",6,[[]]],[10,"smootheststep","","Calculates a sigmoid-like 7th-order interpolation function…",6,[[]]],[0,"rng","thermite","",null,null],[0,"pcg32","thermite::rng","",null,null],[3,"PCG32","thermite::rng::pcg32","",null,null],[11,"new","","",7,[[["vu64",6]]]],[0,"xoshiro","thermite::rng","",null,null],[3,"SplitMix64","thermite::rng::xoshiro","",null,null],[11,"new","","",8,[[["vu64",6]]]],[3,"Xoshiro128Plus","","",null,null],[11,"new","","",9,[[["vu64",6]]]],[3,"Xoshiro256Plus","","",null,null],[11,"new","","",10,[[["vu64",6]]]],[8,"SimdRng","thermite::rng","",null,null],[10,"reseed","","",11,[[["vu64",6]]]],[11,"next_u32","","",11,[[],["vu32",6]]],[11,"next_u64","","",11,[[],["vu64",6]]],[11,"next_f32","","",11,[[],["vf32",6]]],[11,"next_f64","","",11,[[],["vf64",6]]],[0,"iter","thermite","",null,null],[3,"AlignedMut","thermite::iter","",null,null],[3,"AlignedMutIter","","",null,null],[3,"SimdSliceIter","","",null,null],[8,"SimdIteratorExt","","",null,null],[10,"store","","",12,[[["bool",15]]]],[11,"cast","","",12,[[],["simdcastiter",3]]],[8,"IntoSimdIterator","","",null,null],[16,"Item","","",13,null],[16,"IntoIter","","",13,null],[10,"into_simd_iter","","",13,[[]]],[3,"SimdCastIter","","",null,null],[23,"dispatch","thermite","Generates monomorphized backend <code>target_feature</code> function …",null,null],[3,"VectorBuffer","","Aligned SIMD vector storage",null,null],[3,"Divider","","Divider recommended for constant divisors.",null,null],[3,"BranchfreeDivider","","Divider without branching, useful for dynamic divisors.",null,null],[3,"VPtr","","",null,null],[3,"BitMask","","Small integer representation of a mask using individual …",null,null],[3,"Mask","","",null,null],[8,"SimdFromCast","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","Casts one vector to another, performing proper numeric …",14,[[]]],[10,"from_cast_mask","","Casts one mask to another, not caring about the value …",14,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","Casts one vector to another, performing proper numeric …",15,[[]]],[10,"cast_mask","","Casts one mask to another, not caring about the value …",15,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction …",null,null],[11,"cast_to","","",16,[[],["simdfromcast",8]]],[8,"SimdShuffleIndices","","Helper trait for constant vector shuffles",null,null],[18,"INDICES","","",17,null],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",18,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",18,null],[18,"NUM_ELEMENTS","","",18,null],[18,"ALIGNMENT","","",18,null],[10,"splat","","Creates a new vector with all lanes set to the given value",18,[[]]],[11,"undefined","","Returns a vector containing possibly undefined or …",18,[[]]],[11,"splat_any","","Same as <code>splat</code>, but is more convenient for initializing …",18,[[]]],[11,"splat_as","","Splats a value by casting to the element type via …",18,[[]]],[11,"shuffle","","Shuffles between two vectors based on the static indices …",18,[[["simdshuffleindices",8]]]],[10,"shuffle_unchecked","","Shuffles between two vectors based on the static indices …",18,[[["simdshuffleindices",8]]]],[11,"shuffle_dyn","","Shuffles between two vectors based on the dynamic indices …",18,[[]]],[11,"shuffle_dyn_unchecked","","Like [<code>Self::shuffle_dyn</code>], but does not check for valid …",18,[[]]],[11,"alloc","","",18,[[["usize",15]],["vectorbuffer",3]]],[11,"extract","","Extracts an element at the given lane index.",18,[[["usize",15]]]],[11,"replace","","Returns a new vector with the given value at the given …",18,[[["usize",15]]]],[10,"extract_unchecked","","Extracts an element at the given lane index.",18,[[["usize",15]]]],[10,"replace_unchecked","","Returns a new vector with the given value at the given …",18,[[["usize",15]]]],[11,"load_aligned","","Loads a vector from a slice that has an alignment of at …",18,[[]]],[11,"load_unaligned","","Loads a vector from a slice",18,[[]]],[11,"store_aligned","","Stores a vector into a slice with an alignment of at …",18,[[]]],[11,"store_unaligned","","Stores a vector into a slice.",18,[[]]],[11,"load_aligned_unchecked","","Loads a vector from the given aligned address.",18,[[]]],[11,"store_aligned_unchecked","","Stores a vector to the given aligned address.",18,[[]]],[11,"load_unaligned_unchecked","","Loads a vector from a given address (does not have to be …",18,[[]]],[11,"store_unaligned_unchecked","","Stores a vector to a given address (does not have to be …",18,[[]]],[11,"gather_unchecked","","",18,[[]]],[11,"scatter_unchecked","","",18,[[]]],[11,"gather_masked_unchecked","","Like <code>Self::gather</code>, but individual lanes are loaded based …",18,[[["mask",3]]]],[11,"scatter_masked_unchecked","","Like <code>self.scatter()</code>, but individual lanes are stored …",18,[[["mask",3]]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes <code>!self & other</code>, may be more performant than the …",19,[[]]],[18,"FULL_BITMASK","","Bitmask corresponding to all lanes of the mask being …",19,null],[10,"bitmask","","Returns an integer where each bit corresponds to the …",19,[[],["u16",15]]],[8,"SimdVector","","Defines common operations on numeric vectors",null,null],[11,"gather","","Loads values from arbitrary addresses in memory based on …",20,[[]]],[11,"scatter","","Stores values to arbitrary addresses in memory based on …",20,[[]]],[11,"gather_masked","","",20,[[["mask",3]]]],[11,"scatter_masked","","",20,[[["mask",3]]]],[10,"zero","","",20,[[]]],[10,"one","","",20,[[]]],[10,"indexed","","Returns a vector where the first lane is zero, and each …",20,[[]]],[10,"min_value","","Maximum representable valid value",20,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",20,[[]]],[11,"min","","Per-lane, select the minimum value",20,[[]]],[11,"max","","Per-lane, select the maximum value",20,[[]]],[10,"min_element","","Find the minimum value across all lanes",20,[[]]],[10,"max_element","","Find the maximum value across all lanes",20,[[]]],[10,"eq","","",20,[[],["mask",3]]],[10,"gt","","",20,[[],["mask",3]]],[11,"conditional_add","","Add <code>self</code> and <code>value</code> only if the corresponding lane in the …",20,[[["mask",3]]]],[11,"conditional_sub","","Subtracts <code>value</code> from <code>self</code> only if the corresponding lane …",20,[[["mask",3]]]],[11,"ne","","",20,[[],["mask",3]]],[11,"lt","","",20,[[],["mask",3]]],[11,"le","","",20,[[],["mask",3]]],[11,"ge","","",20,[[],["mask",3]]],[8,"SimdIntoBits","","Transmutations into raw bits",null,null],[11,"into_bits","","",21,[[]]],[8,"SimdFromBits","","Transmutations from raw bits",null,null],[11,"from_bits","","",22,[[]]],[8,"SimdIntegerDivision","","Specialized integer division by [<code>Divider</code>]s",null,null],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[10,"saturating_add","","Saturating addition, will not wrap",23,[[]]],[10,"saturating_sub","","Saturating subtraction, will not wrap",23,[[]]],[10,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t …",23,[[]]],[10,"wrapping_product","","Multiply all lanes together, wrapping the result if it …",23,[[]]],[11,"rol","","Rotates the bits in each lane to the left (towards HSB) …",23,[[["u32",15]]]],[11,"ror","","Rotates the bits in each lane to the right (towards LSB) …",23,[[["u32",15]]]],[10,"rolv","","Rotates the bits in each lane to the left (towards HSB) …",23,[[]]],[10,"rorv","","Rotates the bits in each lane to the right (towards LSB) …",23,[[]]],[10,"reverse_bits","","Reverses the bits of each lane in the vector.",23,[[]]],[10,"count_ones","","Counts the number of 1 bits in each lane of the vector.",23,[[]]],[11,"count_zeros","","Counts the number of 0 bits in each lane of the vector.",23,[[]]],[10,"leading_zeros","","Counts the number of leading zeros in each lane of the …",23,[[]]],[10,"trailing_zeros","","Counts the number of trailing zeros in each lane of the …",23,[[]]],[11,"leading_ones","","Counts the number of leading ones in each lane of the …",23,[[]]],[11,"trailing_ones","","Counts the number of trailing ones in each lane of the …",23,[[]]],[8,"SimdUnsignedIntVector","","Unsigned SIMD vector",null,null],[11,"log2p1","","Returns <code>floor(log2(x)) + 1</code>",24,[[]]],[11,"is_power_of_two","","Returns a mask wherein if a lane was a power of two, the …",24,[[],["mask",3]]],[10,"next_power_of_two_m1","","Returns <code>next_power_of_two(x) - 1</code>",24,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",25,[[]]],[10,"min_positive","","Minimum positive number",25,[[]]],[11,"abs","","Absolute value",25,[[]]],[11,"copysign","","Copies the sign from <code>sign</code> to <code>self</code>",25,[[]]],[11,"signum","","Returns <code>-1</code> if less than zero, <code>+1</code> otherwise.",25,[[]]],[10,"conditional_neg","","For each lane, if the mask is true, negate the value.",25,[[["mask",3]]]],[11,"is_positive","","Test if positive, greater or equal to zero",25,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",25,[[],["mask",3]]],[11,"select_negative","","On platforms with true \\\"select\\\" instructions, they often …",25,[[]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[16,"Vi","","",26,null],[16,"Vu","","",26,null],[10,"epsilon","","",26,[[]]],[10,"infinity","","",26,[[]]],[10,"neg_infinity","","",26,[[]]],[10,"neg_zero","","",26,[[]]],[10,"nan","","",26,[[]]],[11,"load_f16_unaligned","","Load half-precision floats and up-convert them into <code>Self</code>",26,[[]]],[11,"store_f16_unaligned","","Down-convert <code>self</code> into half-precision and store",26,[[]]],[10,"load_f16_unaligned_unchecked","","",26,[[]]],[10,"store_f16_unaligned_unchecked","","",26,[[]]],[10,"to_int_fast","","Can convert to a signed integer faster than a regular <code>cast</code>…",26,[[]]],[10,"to_uint_fast","","Can convert to a signed integer faster than a regular <code>cast</code>…",26,[[]]],[11,"combine_sign","","Same as <code>self * sign.signum()</code> or …",26,[[]]],[10,"sum","","Compute the horizontal sum of all elements",26,[[]]],[10,"product","","Compute the horizontal product of all elements",26,[[]]],[10,"mul_add","","Fused multiply-add",26,[[]]],[11,"mul_sub","","Fused multiply-subtract",26,[[]]],[11,"nmul_add","","Fused negated multiply-add",26,[[]]],[11,"nmul_sub","","Fused negated multiply-subtract",26,[[]]],[11,"mul_adde","","Fused multiply-add, with <em>at worst</em> precision equal to …",26,[[]]],[11,"mul_sube","","Fused multiply-subtract, with <em>at worst</em> precision equal to …",26,[[]]],[11,"nmul_adde","","Fused negated multiply-add, with <em>at worst</em> precision equal …",26,[[]]],[11,"nmul_sube","","Fused negated multiply-subtract, with <em>at worst</em> precision …",26,[[]]],[10,"round","","Rounds to the nearest representable integer.",26,[[]]],[10,"ceil","","Rounds upwards towards positive infinity.",26,[[]]],[10,"floor","","Rounds downward towards negative infinity.",26,[[]]],[10,"trunc","","Truncates any rational value towards zero",26,[[]]],[11,"fract","","Returns the fractional part of a number (the part between …",26,[[]]],[10,"sqrt","","Calculates the square-root of each element in the vector.",26,[[]]],[11,"rsqrt","","Compute the approximate reciprocal of the square root …",26,[[]]],[11,"rcp","","Computes the approximate reciprocal/inverse of each value",26,[[]]],[11,"approx_eq","","",26,[[],["mask",3]]],[11,"clamp","","",26,[[]]],[11,"saturate","","Clamps self to between 0 and 1",26,[[]]],[11,"is_finite","","",26,[[],["mask",3]]],[11,"is_infinite","","",26,[[],["mask",3]]],[11,"is_normal","","",26,[[],["mask",3]]],[10,"is_subnormal","","",26,[[],["mask",3]]],[11,"is_zero_or_subnormal","","",26,[[],["mask",3]]],[11,"is_nan","","",26,[[],["mask",3]]],[8,"SimdPointer","","Guarantees the vector can be used as a pointer in <code>VPtr</code>",null,null],[4,"SimdInstructionSet","","Enum of supported instruction sets",null,null],[13,"Scalar","","",27,null],[13,"SSE2","","",27,null],[13,"SSE42","","",27,null],[13,"AVX","","",27,null],[13,"AVX2","","",27,null],[11,"runtime_detect","","",27,[[],["simdinstructionset",4]]],[11,"has_true_fma","","True fused multiply-add instructions are only used on …",27,[[],["bool",15]]],[11,"has_emulated_fma","","On older platforms, fused multiply-add instructions can …",27,[[],["bool",15]]],[8,"Simd","","SIMD Instruction set, contains all types",null,null],[18,"INSTRSET","","",28,null],[16,"Vi32","","32-bit signed integer vector",28,null],[16,"Vi64","","64-bit signed integer vector",28,null],[16,"Vu32","","32-bit unsigned integer vector",28,null],[16,"Vu64","","64-bit unsigned integer vector",28,null],[16,"Vf32","","Single-precision 32-bit floating point vector",28,null],[16,"Vf64","","Double-precision 64-bit floating point vector",28,null],[16,"Vusize","","",28,null],[16,"Visize","","",28,null],[6,"Vi32","","",null,null],[6,"Vi64","","",null,null],[6,"Vu32","","",null,null],[6,"Vu64","","",null,null],[6,"Vf32","","",null,null],[6,"Vf64","","",null,null],[6,"Vusize","","",null,null],[6,"Visize","","",null,null],[8,"SimdAssociatedVector","","",null,null],[16,"V","","",29,null],[6,"AssociatedVector","","Associated vector type for a scalar type",null,null],[14,"dispatch_dyn","","Detects processor architecture at runtime and generates a …",null,null],[14,"shuffle","","Shuffles the elements in one or two vectors into a new …",null,null],[11,"from_cast","thermite::arch::sse","",30,[[]]],[11,"from_cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"cast","","",30,[[]]],[11,"cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"from_cast","","",31,[[]]],[11,"from_cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"cast","","",31,[[]]],[11,"cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"from_cast","","",32,[[]]],[11,"from_cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"cast","","",32,[[]]],[11,"cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"from_cast","thermite::arch::avx","",33,[[]]],[11,"from_cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"cast","","",33,[[]]],[11,"cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from_cast","","",34,[[]]],[11,"from_cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"cast","","",34,[[]]],[11,"cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"from_cast","","",35,[[]]],[11,"from_cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"cast","","",35,[[]]],[11,"cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"from_cast","thermite","",36,[[]]],[11,"from_cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"cast","","",36,[[]]],[11,"cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx1","",37,[[]]],[11,"from_cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"cast","","",37,[[]]],[11,"cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"from_cast","thermite::backends::avx2","",38,[[]]],[11,"from_cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"cast","","",38,[[]]],[11,"cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"from_cast","","",39,[[]]],[11,"from_cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"cast","","",39,[[]]],[11,"cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"from_cast","","",40,[[]]],[11,"from_cast_mask","","",40,[[["mask",3]],["mask",3]]],[11,"cast","","",40,[[]]],[11,"cast_mask","","",40,[[["mask",3]],["mask",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"from_cast","","",41,[[]]],[11,"from_cast_mask","","",41,[[["mask",3]],["mask",3]]],[11,"cast","","",41,[[]]],[11,"cast_mask","","",41,[[["mask",3]],["mask",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"from_cast","","",42,[[]]],[11,"from_cast_mask","","",42,[[["mask",3]],["mask",3]]],[11,"cast","","",42,[[]]],[11,"cast_mask","","",42,[[["mask",3]],["mask",3]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"from_cast","","",43,[[]]],[11,"from_cast_mask","","",43,[[["mask",3]],["mask",3]]],[11,"cast","","",43,[[]]],[11,"cast_mask","","",43,[[["mask",3]],["mask",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"from_cast","","",44,[[]]],[11,"from_cast_mask","","",44,[[["mask",3]],["mask",3]]],[11,"cast","","",44,[[]]],[11,"cast_mask","","",44,[[["mask",3]],["mask",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"from_cast","thermite","",45,[[]]],[11,"from_cast_mask","","",45,[[["mask",3]],["mask",3]]],[11,"cast","","",45,[[]]],[11,"cast_mask","","",45,[[["mask",3]],["mask",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"from_cast","","",46,[[]]],[11,"from_cast_mask","","",46,[[["mask",3]],["mask",3]]],[11,"cast","","",46,[[]]],[11,"cast_mask","","",46,[[["mask",3]],["mask",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"from_cast","","",47,[[]]],[11,"from_cast_mask","","",47,[[["mask",3]],["mask",3]]],[11,"cast","","",47,[[]]],[11,"cast_mask","","",47,[[["mask",3]],["mask",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"from_cast","","",48,[[]]],[11,"from_cast_mask","","",48,[[["mask",3]],["mask",3]]],[11,"cast","","",48,[[]]],[11,"cast_mask","","",48,[[["mask",3]],["mask",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"from_cast","","",49,[[]]],[11,"from_cast_mask","","",49,[[["mask",3]],["mask",3]]],[11,"cast","","",49,[[]]],[11,"cast_mask","","",49,[[["mask",3]],["mask",3]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"from_cast","thermite::math::compensated","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from_cast","thermite::math::policies","",50,[[]]],[11,"from_cast_mask","","",50,[[["mask",3]],["mask",3]]],[11,"cast","","",50,[[]]],[11,"cast_mask","","",50,[[["mask",3]],["mask",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"from_cast","","",51,[[]]],[11,"from_cast_mask","","",51,[[["mask",3]],["mask",3]]],[11,"cast","","",51,[[]]],[11,"cast_mask","","",51,[[["mask",3]],["mask",3]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"from_cast","","",52,[[]]],[11,"from_cast_mask","","",52,[[["mask",3]],["mask",3]]],[11,"cast","","",52,[[]]],[11,"cast_mask","","",52,[[["mask",3]],["mask",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"from_cast","","",53,[[]]],[11,"from_cast_mask","","",53,[[["mask",3]],["mask",3]]],[11,"cast","","",53,[[]]],[11,"cast_mask","","",53,[[["mask",3]],["mask",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"from_cast","","",54,[[]]],[11,"from_cast_mask","","",54,[[["mask",3]],["mask",3]]],[11,"cast","","",54,[[]]],[11,"cast_mask","","",54,[[["mask",3]],["mask",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"from_cast","","",55,[[]]],[11,"from_cast_mask","","",55,[[["mask",3]],["mask",3]]],[11,"cast","","",55,[[]]],[11,"cast_mask","","",55,[[["mask",3]],["mask",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"from_cast","thermite::math","",3,[[]]],[11,"from_cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"cast","","",3,[[]]],[11,"cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from_cast","","",4,[[]]],[11,"from_cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"cast","","",4,[[]]],[11,"cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from_cast","thermite::rng::pcg32","",7,[[]]],[11,"from_cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"cast","","",7,[[]]],[11,"cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from_cast","thermite::rng::xoshiro","",8,[[]]],[11,"from_cast_mask","","",8,[[["mask",3]],["mask",3]]],[11,"cast","","",8,[[]]],[11,"cast_mask","","",8,[[["mask",3]],["mask",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from_cast","","",9,[[]]],[11,"from_cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"cast","","",9,[[]]],[11,"cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from_cast","","",10,[[]]],[11,"from_cast_mask","","",10,[[["mask",3]],["mask",3]]],[11,"cast","","",10,[[]]],[11,"cast_mask","","",10,[[["mask",3]],["mask",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from_cast","thermite::iter","",56,[[]]],[11,"from_cast_mask","","",56,[[["mask",3]],["mask",3]]],[11,"cast","","",56,[[]]],[11,"cast_mask","","",56,[[["mask",3]],["mask",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from_cast","","",57,[[]]],[11,"from_cast_mask","","",57,[[["mask",3]],["mask",3]]],[11,"cast","","",57,[[]]],[11,"cast_mask","","",57,[[["mask",3]],["mask",3]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"into_iter","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"store","","",58,[[["bool",15]]]],[11,"from_cast","","",58,[[]]],[11,"from_cast_mask","","",58,[[["mask",3]],["mask",3]]],[11,"cast","","",58,[[]]],[11,"cast_mask","","",58,[[["mask",3]],["mask",3]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"into_iter","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"store","","",59,[[["bool",15]]]],[11,"from_cast","","",59,[[]]],[11,"from_cast_mask","","",59,[[["mask",3]],["mask",3]]],[11,"cast","","",59,[[]]],[11,"cast_mask","","",59,[[["mask",3]],["mask",3]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"into_iter","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from_cast","thermite","",27,[[]]],[11,"from_cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"cast","","",27,[[]]],[11,"cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"clone","thermite::arch::sse","",31,[[],["__m128d",3]]],[11,"clone","thermite::arch::avx","",35,[[],["__m256i",3]]],[11,"clone","thermite::arch::sse","",30,[[],["__m128",3]]],[11,"clone","thermite::arch::avx","",33,[[],["__m256",3]]],[11,"clone","thermite::arch::sse","",32,[[],["__m128i",3]]],[11,"clone","thermite::arch::avx","",34,[[],["__m256d",3]]],[11,"fmt","","",35,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","thermite::arch::sse","",31,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","thermite::arch::avx","",33,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","thermite::arch::sse","",32,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","thermite::arch::avx","",34,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","thermite::arch::sse","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"reseed","thermite::rng::pcg32","",7,[[["vu64",6]]]],[11,"next_u32","","",7,[[],["vu32",6]]],[11,"reseed","thermite::rng::xoshiro","",8,[[["vu64",6]]]],[11,"next_u32","","",8,[[],["vu32",6]]],[11,"next_u64","","",8,[[],["vu64",6]]],[11,"reseed","","",9,[[["vu64",6]]]],[11,"next_u64","","",9,[[],["vu64",6]]],[11,"reseed","","",10,[[["vu64",6]]]],[11,"next_u64","","",10,[[],["vu64",6]]],[11,"from_cast","thermite::backends::avx2","",38,[[["avx2",3],["i32x8",3]]]],[11,"from_cast_mask","","",38,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",38,[[["avx2",3],["mask",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",38,[[["mask",3],["avx2",3],["u64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["avx2",3],["f64x8",3]]]],[11,"from_cast_mask","","",38,[[["avx2",3],["mask",3],["f64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",38,[[["avx2",3],["i64x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["avx2",3],["i32x8",3]]]],[11,"from_cast_mask","","",39,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",39,[[["avx2",3],["mask",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["avx2",3],["f32x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["mask",3],["avx2",3],["u64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",39,[[["avx2",3],["i64x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["avx2",3],["f32x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",40,[[["avx2",3],["mask",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["mask",3],["avx2",3],["u64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["avx2",3],["f64x8",3]]]],[11,"from_cast_mask","","",40,[[["avx2",3],["mask",3],["f64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",40,[[["avx2",3],["i64x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",41,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",41,[[["avx2",3],["f32x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",41,[[["avx2",3],["i32x8",3]]]],[11,"from_cast_mask","","",41,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",41,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",41,[[["avx2",3],["mask",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",41,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",41,[[["mask",3],["avx2",3],["u64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",41,[[["avx2",3],["f64x8",3]]]],[11,"from_cast_mask","","",41,[[["avx2",3],["mask",3],["f64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",42,[[["avx2",3],["i32x8",3]]]],[11,"from_cast_mask","","",42,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",42,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",42,[[["avx2",3],["f32x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",42,[[["avx2",3],["f64x8",3]]]],[11,"from_cast_mask","","",42,[[["avx2",3],["mask",3],["f64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",42,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",42,[[["mask",3],["avx2",3],["u64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",42,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",42,[[["avx2",3],["i64x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",43,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",43,[[["avx2",3],["mask",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",43,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",43,[[["avx2",3],["f32x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",43,[[["avx2",3],["i32x8",3]]]],[11,"from_cast_mask","","",43,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",43,[[["avx2",3],["f64x8",3]]]],[11,"from_cast_mask","","",43,[[["avx2",3],["mask",3],["f64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",43,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",43,[[["avx2",3],["i64x8",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"splat","","",38,[[]]],[11,"undefined","","",38,[[]]],[11,"load_aligned_unchecked","","",38,[[]]],[11,"load_unaligned_unchecked","","",38,[[]]],[11,"store_aligned_unchecked","","",38,[[]]],[11,"store_unaligned_unchecked","","",38,[[]]],[11,"extract_unchecked","","",38,[[["usize",15]]]],[11,"replace_unchecked","","",38,[[["usize",15]]]],[11,"shuffle_unchecked","","",38,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",38,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",38,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","","",39,[[]]],[11,"undefined","","",39,[[]]],[11,"load_aligned_unchecked","","",39,[[]]],[11,"load_unaligned_unchecked","","",39,[[]]],[11,"store_aligned_unchecked","","",39,[[]]],[11,"store_unaligned_unchecked","","",39,[[]]],[11,"extract_unchecked","","",39,[[["usize",15]]]],[11,"replace_unchecked","","",39,[[["usize",15]]]],[11,"shuffle_unchecked","","",39,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",39,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",39,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","","",40,[[]]],[11,"undefined","","",40,[[]]],[11,"load_aligned_unchecked","","",40,[[]]],[11,"load_unaligned_unchecked","","",40,[[]]],[11,"store_aligned_unchecked","","",40,[[]]],[11,"store_unaligned_unchecked","","",40,[[]]],[11,"extract_unchecked","","",40,[[["usize",15]]]],[11,"replace_unchecked","","",40,[[["usize",15]]]],[11,"shuffle_unchecked","","",40,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",40,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",40,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","","",41,[[]]],[11,"undefined","","",41,[[]]],[11,"load_aligned_unchecked","","",41,[[]]],[11,"store_aligned_unchecked","","",41,[[]]],[11,"extract_unchecked","","",41,[[["usize",15]]]],[11,"replace_unchecked","","",41,[[["usize",15]]]],[11,"shuffle_unchecked","","",41,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",41,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",41,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","","",42,[[]]],[11,"undefined","","",42,[[]]],[11,"load_aligned_unchecked","","",42,[[]]],[11,"load_unaligned_unchecked","","",42,[[]]],[11,"store_aligned_unchecked","","",42,[[]]],[11,"store_unaligned_unchecked","","",42,[[]]],[11,"extract_unchecked","","",42,[[["usize",15]]]],[11,"replace_unchecked","","",42,[[["usize",15]]]],[11,"shuffle_unchecked","","",42,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",42,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",42,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","","",43,[[]]],[11,"undefined","","",43,[[]]],[11,"load_aligned_unchecked","","",43,[[]]],[11,"store_aligned_unchecked","","",43,[[]]],[11,"extract_unchecked","","",43,[[["usize",15]]]],[11,"replace_unchecked","","",43,[[["usize",15]]]],[11,"shuffle_unchecked","","",43,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",43,[[["avx2",3],["i32x8",3]]]],[11,"gather_masked_unchecked","","",43,[[["avx2",3],["mask",3],["i32x8",3]]]],[11,"splat","thermite","",48,[[["bool",15]]]],[11,"load_aligned_unchecked","","",48,[[]]],[11,"store_aligned_unchecked","","",48,[[]]],[11,"load_unaligned_unchecked","","",48,[[]]],[11,"store_unaligned_unchecked","","",48,[[]]],[11,"extract_unchecked","","",48,[[["usize",15]],["bool",15]]],[11,"replace_unchecked","","",48,[[["usize",15],["bool",15]]]],[11,"shuffle_unchecked","","",48,[[["simdshuffleindices",8]]]],[11,"and_not","thermite::backends::avx2","",38,[[]]],[11,"bitmask","","",38,[[],["u16",15]]],[11,"_mm_not","","",38,[[]]],[11,"_mm_bitand","","",38,[[]]],[11,"_mm_bitor","","",38,[[]]],[11,"_mm_bitxor","","",38,[[]]],[11,"_mm_shr","","",38,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",38,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",38,[[["u32",15]]]],[11,"_mm_shri","","",38,[[["u32",15]]]],[11,"and_not","","",39,[[]]],[11,"bitmask","","",39,[[],["u16",15]]],[11,"_mm_not","","",39,[[]]],[11,"_mm_bitand","","",39,[[]]],[11,"_mm_bitor","","",39,[[]]],[11,"_mm_bitxor","","",39,[[]]],[11,"_mm_shr","","",39,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",39,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",39,[[["u32",15]]]],[11,"_mm_shri","","",39,[[["u32",15]]]],[11,"and_not","","",40,[[]]],[11,"bitmask","","",40,[[],["u16",15]]],[11,"_mm_not","","",40,[[]]],[11,"_mm_bitand","","",40,[[]]],[11,"_mm_bitor","","",40,[[]]],[11,"_mm_bitxor","","",40,[[]]],[11,"_mm_shr","","",40,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",40,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",40,[[["u32",15]]]],[11,"_mm_shri","","",40,[[["u32",15]]]],[11,"and_not","","",41,[[]]],[11,"bitmask","","",41,[[],["u16",15]]],[11,"_mm_not","","",41,[[]]],[11,"_mm_bitand","","",41,[[]]],[11,"_mm_bitor","","",41,[[]]],[11,"_mm_bitxor","","",41,[[]]],[11,"_mm_shr","","",41,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",41,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",41,[[["u32",15]]]],[11,"_mm_shri","","",41,[[["u32",15]]]],[11,"and_not","","",42,[[]]],[11,"bitmask","","",42,[[],["u16",15]]],[11,"_mm_not","","",42,[[]]],[11,"_mm_bitand","","",42,[[]]],[11,"_mm_bitor","","",42,[[]]],[11,"_mm_bitxor","","",42,[[]]],[11,"_mm_shr","","",42,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",42,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",42,[[["u32",15]]]],[11,"_mm_shri","","",42,[[["u32",15]]]],[11,"and_not","","",43,[[]]],[11,"bitmask","","",43,[[],["u16",15]]],[11,"_mm_not","","",43,[[]]],[11,"_mm_bitand","","",43,[[]]],[11,"_mm_bitor","","",43,[[]]],[11,"_mm_bitxor","","",43,[[]]],[11,"_mm_shr","","",43,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",43,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",43,[[["u32",15]]]],[11,"_mm_shri","","",43,[[["u32",15]]]],[11,"zero","","",38,[[]]],[11,"one","","",38,[[]]],[11,"indexed","","",38,[[]]],[11,"min_value","","",38,[[]]],[11,"max_value","","",38,[[]]],[11,"min","","",38,[[]]],[11,"max","","",38,[[]]],[11,"min_element","","",38,[[]]],[11,"max_element","","",38,[[]]],[11,"eq","","",38,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",38,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",38,[[],[["mask",3],["avx2",3]]]],[11,"le","","",38,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",38,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",38,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",38,[[]]],[11,"_mm_sub","","",38,[[]]],[11,"_mm_mul","","",38,[[]]],[11,"_mm_div","","",38,[[]]],[11,"_mm_rem","","",38,[[]]],[11,"zero","","",39,[[]]],[11,"one","","",39,[[]]],[11,"indexed","","",39,[[]]],[11,"min_value","","",39,[[]]],[11,"max_value","","",39,[[]]],[11,"min","","",39,[[]]],[11,"max","","",39,[[]]],[11,"min_element","","",39,[[]]],[11,"max_element","","",39,[[]]],[11,"eq","","",39,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",39,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",39,[[],[["mask",3],["avx2",3]]]],[11,"le","","",39,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",39,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",39,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",39,[[]]],[11,"_mm_sub","","",39,[[]]],[11,"_mm_mul","","",39,[[]]],[11,"_mm_div","","",39,[[]]],[11,"_mm_rem","","",39,[[]]],[11,"zero","","",40,[[]]],[11,"one","","",40,[[]]],[11,"indexed","","",40,[[]]],[11,"min","","",40,[[]]],[11,"max","","",40,[[]]],[11,"min_value","","",40,[[]]],[11,"max_value","","",40,[[]]],[11,"min_element","","",40,[[]]],[11,"max_element","","",40,[[]]],[11,"eq","","",40,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",40,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",40,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",40,[[]]],[11,"_mm_sub","","",40,[[]]],[11,"_mm_mul","","",40,[[]]],[11,"_mm_div","","",40,[[]]],[11,"_mm_rem","","",40,[[]]],[11,"zero","","",41,[[]]],[11,"one","","",41,[[]]],[11,"indexed","","",41,[[]]],[11,"min_value","","",41,[[]]],[11,"max_value","","",41,[[]]],[11,"min_element","","",41,[[]]],[11,"max_element","","",41,[[]]],[11,"eq","","",41,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",41,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",41,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",41,[[]]],[11,"_mm_sub","","",41,[[]]],[11,"_mm_mul","","",41,[[]]],[11,"_mm_div","","",41,[[]]],[11,"_mm_rem","","",41,[[]]],[11,"zero","","",42,[[]]],[11,"one","","",42,[[]]],[11,"indexed","","",42,[[]]],[11,"min","","",42,[[]]],[11,"max","","",42,[[]]],[11,"min_value","","",42,[[]]],[11,"max_value","","",42,[[]]],[11,"min_element","","",42,[[]]],[11,"max_element","","",42,[[]]],[11,"eq","","",42,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",42,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",42,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",42,[[]]],[11,"_mm_sub","","",42,[[]]],[11,"_mm_mul","","",42,[[]]],[11,"_mm_div","","",42,[[]]],[11,"_mm_rem","","",42,[[]]],[11,"zero","","",43,[[]]],[11,"one","","",43,[[]]],[11,"indexed","","",43,[[]]],[11,"min_value","","",43,[[]]],[11,"max_value","","",43,[[]]],[11,"min_element","","",43,[[]]],[11,"max_element","","",43,[[]]],[11,"eq","","",43,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",43,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",43,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",43,[[]]],[11,"_mm_sub","","",43,[[]]],[11,"_mm_mul","","",43,[[]]],[11,"_mm_div","","",43,[[]]],[11,"_mm_rem","","",43,[[]]],[11,"into_bits","","",38,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",39,[[],[["u64x8",3],["avx2",3]]]],[11,"into_bits","","",40,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",41,[[],[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",38,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",39,[[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",40,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",41,[[["u64x8",3],["avx2",3]]]],[11,"saturating_add","","",40,[[]]],[11,"saturating_sub","","",40,[[]]],[11,"wrapping_sum","","",40,[[]]],[11,"wrapping_product","","",40,[[]]],[11,"rolv","","",40,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",40,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",40,[[]]],[11,"count_ones","","",40,[[]]],[11,"leading_zeros","","",40,[[]]],[11,"trailing_zeros","","",40,[[]]],[11,"saturating_add","","",41,[[]]],[11,"saturating_sub","","",41,[[]]],[11,"wrapping_sum","","",41,[[]]],[11,"wrapping_product","","",41,[[]]],[11,"rolv","","",41,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",41,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",41,[[]]],[11,"count_ones","","",41,[[]]],[11,"leading_zeros","","",41,[[]]],[11,"trailing_zeros","","",41,[[]]],[11,"saturating_add","","",42,[[]]],[11,"saturating_sub","","",42,[[]]],[11,"wrapping_sum","","",42,[[]]],[11,"wrapping_product","","",42,[[]]],[11,"rolv","","",42,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",42,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",42,[[]]],[11,"count_ones","","",42,[[]]],[11,"leading_zeros","","",42,[[]]],[11,"trailing_zeros","","",42,[[]]],[11,"saturating_add","","",43,[[]]],[11,"saturating_sub","","",43,[[]]],[11,"wrapping_sum","","",43,[[]]],[11,"wrapping_product","","",43,[[]]],[11,"rolv","","",43,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",43,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",43,[[]]],[11,"count_ones","","",43,[[]]],[11,"leading_zeros","","",43,[[]]],[11,"trailing_zeros","","",43,[[]]],[11,"next_power_of_two_m1","","",42,[[]]],[11,"next_power_of_two_m1","","",43,[[]]],[11,"neg_one","","",38,[[]]],[11,"min_positive","","",38,[[]]],[11,"signum","","",38,[[]]],[11,"copysign","","",38,[[]]],[11,"abs","","",38,[[]]],[11,"conditional_neg","","",38,[[["mask",3],["avx2",3]]]],[11,"select_negative","","",38,[[]]],[11,"_mm_neg","","",38,[[]]],[11,"neg_one","","",39,[[]]],[11,"min_positive","","",39,[[]]],[11,"signum","","",39,[[]]],[11,"copysign","","",39,[[]]],[11,"abs","","",39,[[]]],[11,"conditional_neg","","",39,[[["mask",3],["avx2",3]]]],[11,"select_negative","","",39,[[]]],[11,"_mm_neg","","",39,[[]]],[11,"neg_one","","",40,[[]]],[11,"min_positive","","",40,[[]]],[11,"abs","","",40,[[]]],[11,"is_positive","","",40,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",40,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",40,[[]]],[11,"conditional_neg","","",40,[[["mask",3],["avx2",3]]]],[11,"_mm_neg","","",40,[[]]],[11,"neg_one","","",41,[[]]],[11,"min_positive","","",41,[[]]],[11,"abs","","",41,[[]]],[11,"is_positive","","",41,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",41,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",41,[[]]],[11,"conditional_neg","","",41,[[["mask",3],["avx2",3]]]],[11,"_mm_neg","","",41,[[]]],[11,"epsilon","","",38,[[]]],[11,"infinity","","",38,[[]]],[11,"neg_infinity","","",38,[[]]],[11,"neg_zero","","",38,[[]]],[11,"nan","","",38,[[]]],[11,"load_f16_unaligned_unchecked","","",38,[[]]],[11,"store_f16_unaligned_unchecked","","",38,[[]]],[11,"to_int_fast","","",38,[[]]],[11,"to_uint_fast","","",38,[[]]],[11,"sum","","",38,[[]]],[11,"product","","",38,[[]]],[11,"mul_add","","",38,[[]]],[11,"mul_sub","","",38,[[]]],[11,"nmul_add","","",38,[[]]],[11,"nmul_sub","","",38,[[]]],[11,"mul_adde","","",38,[[]]],[11,"mul_sube","","",38,[[]]],[11,"nmul_adde","","",38,[[]]],[11,"nmul_sube","","",38,[[]]],[11,"floor","","",38,[[]]],[11,"ceil","","",38,[[]]],[11,"round","","",38,[[]]],[11,"trunc","","",38,[[]]],[11,"sqrt","","",38,[[]]],[11,"rsqrt","","",38,[[]]],[11,"rcp","","",38,[[]]],[11,"is_subnormal","","",38,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",38,[[],[["mask",3],["avx2",3]]]],[11,"epsilon","","",39,[[]]],[11,"infinity","","",39,[[]]],[11,"neg_infinity","","",39,[[]]],[11,"neg_zero","","",39,[[]]],[11,"nan","","",39,[[]]],[11,"load_f16_unaligned_unchecked","","",39,[[]]],[11,"store_f16_unaligned_unchecked","","",39,[[]]],[11,"to_int_fast","","",39,[[]]],[11,"to_uint_fast","","",39,[[]]],[11,"sum","","",39,[[]]],[11,"product","","",39,[[]]],[11,"mul_add","","",39,[[]]],[11,"mul_sub","","",39,[[]]],[11,"nmul_add","","",39,[[]]],[11,"nmul_sub","","",39,[[]]],[11,"mul_adde","","",39,[[]]],[11,"mul_sube","","",39,[[]]],[11,"nmul_adde","","",39,[[]]],[11,"nmul_sube","","",39,[[]]],[11,"floor","","",39,[[]]],[11,"ceil","","",39,[[]]],[11,"round","","",39,[[]]],[11,"trunc","","",39,[[]]],[11,"sqrt","","",39,[[]]],[11,"is_subnormal","","",39,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",39,[[],[["mask",3],["avx2",3]]]],[11,"deref","thermite","",36,[[]]],[11,"deref","","",46,[[]]],[11,"deref_mut","","",36,[[]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx1","",37,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math::compensated","",1,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math","",3,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math::policies","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::pcg32","",7,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::xoshiro","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",27,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx2","",38,[[]]],[11,"div","","",39,[[]]],[11,"div","","",40,[[["divider",3],["i32",15]]]],[11,"div","","",40,[[["branchfreedivider",3],["i32",15]]]],[11,"div","","",40,[[]]],[11,"div","","",41,[[["i64",15],["divider",3]]]],[11,"div","","",41,[[["i64",15],["branchfreedivider",3]]]],[11,"div","","",41,[[]]],[11,"div","","",42,[[["divider",3],["u32",15]]]],[11,"div","","",42,[[["u32",15],["branchfreedivider",3]]]],[11,"div","","",42,[[]]],[11,"div","","",43,[[["divider",3],["u64",15]]]],[11,"div","","",43,[[["branchfreedivider",3],["u64",15]]]],[11,"div","","",43,[[]]],[11,"rem","","",38,[[]]],[11,"rem","","",39,[[]]],[11,"rem","","",40,[[]]],[11,"rem","","",41,[[]]],[11,"rem","","",42,[[]]],[11,"rem","","",43,[[]]],[11,"sub","","",38,[[]]],[11,"sub","","",39,[[]]],[11,"sub","","",40,[[]]],[11,"sub","","",41,[[]]],[11,"sub","","",42,[[]]],[11,"sub","","",43,[[]]],[11,"eq","thermite::backends::avx1","",37,[[["avx1",3]],["bool",15]]],[11,"eq","thermite::backends::avx2","",38,[[],["bool",15]]],[11,"ne","","",38,[[],["bool",15]]],[11,"eq","","",39,[[],["bool",15]]],[11,"ne","","",39,[[],["bool",15]]],[11,"eq","","",40,[[],["bool",15]]],[11,"eq","","",41,[[],["bool",15]]],[11,"eq","","",42,[[],["bool",15]]],[11,"eq","","",43,[[],["bool",15]]],[11,"eq","","",44,[[["avx2",3]],["bool",15]]],[11,"eq","thermite","",46,[[["branchfreedivider",3]],["bool",15]]],[11,"ne","","",46,[[["branchfreedivider",3]],["bool",15]]],[11,"eq","","",45,[[],["bool",15]]],[11,"eq","","",47,[[["vptr",3]],["bool",15]]],[11,"ne","","",47,[[["vptr",3]],["bool",15]]],[11,"eq","","",49,[[],["bool",15]]],[11,"ne","","",49,[[],["bool",15]]],[11,"eq","thermite::math","",3,[[["precisionpolicy",4]],["bool",15]]],[11,"eq","thermite::math::policies","",50,[[["extraprecision",3]],["bool",15]]],[11,"ne","","",50,[[["extraprecision",3]],["bool",15]]],[11,"eq","","",51,[[["ultraperformance",3]],["bool",15]]],[11,"eq","","",52,[[["performance",3]],["bool",15]]],[11,"eq","","",53,[[["precision",3]],["bool",15]]],[11,"eq","","",54,[[["size",3]],["bool",15]]],[11,"eq","","",55,[[["reference",3]],["bool",15]]],[11,"eq","thermite::rng::pcg32","",7,[[["pcg32",3]],["bool",15]]],[11,"ne","","",7,[[["pcg32",3]],["bool",15]]],[11,"eq","thermite::rng::xoshiro","",8,[[["splitmix64",3]],["bool",15]]],[11,"ne","","",8,[[["splitmix64",3]],["bool",15]]],[11,"eq","","",9,[[["xoshiro128plus",3]],["bool",15]]],[11,"ne","","",9,[[["xoshiro128plus",3]],["bool",15]]],[11,"eq","","",10,[[["xoshiro256plus",3]],["bool",15]]],[11,"ne","","",10,[[["xoshiro256plus",3]],["bool",15]]],[11,"eq","thermite","",27,[[["simdinstructionset",4]],["bool",15]]],[11,"cmp","thermite::math","",3,[[["precisionpolicy",4]],["ordering",4]]],[11,"cmp","thermite::math::policies","",50,[[["extraprecision",3]],["ordering",4]]],[11,"cmp","","",51,[[["ultraperformance",3]],["ordering",4]]],[11,"cmp","","",52,[[["performance",3]],["ordering",4]]],[11,"cmp","","",53,[[["precision",3]],["ordering",4]]],[11,"cmp","","",54,[[["size",3]],["ordering",4]]],[11,"cmp","","",55,[[["reference",3]],["ordering",4]]],[11,"cmp","thermite","",27,[[["simdinstructionset",4]],["ordering",4]]],[11,"partial_cmp","thermite::math","",3,[[["precisionpolicy",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","thermite::math::policies","",50,[[["extraprecision",3]],[["ordering",4],["option",4]]]],[11,"lt","","",50,[[["extraprecision",3]],["bool",15]]],[11,"le","","",50,[[["extraprecision",3]],["bool",15]]],[11,"gt","","",50,[[["extraprecision",3]],["bool",15]]],[11,"ge","","",50,[[["extraprecision",3]],["bool",15]]],[11,"partial_cmp","","",51,[[["ultraperformance",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",52,[[["performance",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",53,[[["precision",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",54,[[["size",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",55,[[["reference",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","thermite","",27,[[["simdinstructionset",4]],[["ordering",4],["option",4]]]],[11,"add","thermite::backends::avx2","",38,[[]]],[11,"add","","",39,[[]]],[11,"add","","",40,[[]]],[11,"add","","",41,[[]]],[11,"add","","",42,[[]]],[11,"add","","",43,[[]]],[11,"add","thermite::math::compensated","",1,[[]]],[11,"mul","thermite::backends::avx2","",38,[[]]],[11,"mul","","",39,[[]]],[11,"mul","","",40,[[]]],[11,"mul","","",41,[[]]],[11,"mul","","",42,[[]]],[11,"mul","","",43,[[]]],[11,"mul","thermite::math::compensated","",1,[[]]],[11,"neg","thermite::backends::avx2","",38,[[]]],[11,"neg","","",39,[[]]],[11,"neg","","",40,[[]]],[11,"neg","","",41,[[]]],[11,"add_assign","","",38,[[]]],[11,"add_assign","","",38,[[]]],[11,"add_assign","","",39,[[]]],[11,"add_assign","","",39,[[]]],[11,"add_assign","","",40,[[]]],[11,"add_assign","","",40,[[]]],[11,"add_assign","","",41,[[]]],[11,"add_assign","","",41,[[]]],[11,"add_assign","","",42,[[]]],[11,"add_assign","","",42,[[]]],[11,"add_assign","","",43,[[]]],[11,"add_assign","","",43,[[]]],[11,"sub_assign","","",38,[[]]],[11,"sub_assign","","",38,[[]]],[11,"sub_assign","","",39,[[]]],[11,"sub_assign","","",39,[[]]],[11,"sub_assign","","",40,[[]]],[11,"sub_assign","","",40,[[]]],[11,"sub_assign","","",41,[[]]],[11,"sub_assign","","",41,[[]]],[11,"sub_assign","","",42,[[]]],[11,"sub_assign","","",42,[[]]],[11,"sub_assign","","",43,[[]]],[11,"sub_assign","","",43,[[]]],[11,"mul_assign","","",38,[[]]],[11,"mul_assign","","",38,[[]]],[11,"mul_assign","","",39,[[]]],[11,"mul_assign","","",39,[[]]],[11,"mul_assign","","",40,[[]]],[11,"mul_assign","","",40,[[]]],[11,"mul_assign","","",41,[[]]],[11,"mul_assign","","",41,[[]]],[11,"mul_assign","","",42,[[]]],[11,"mul_assign","","",42,[[]]],[11,"mul_assign","","",43,[[]]],[11,"mul_assign","","",43,[[]]],[11,"div_assign","","",38,[[]]],[11,"div_assign","","",38,[[]]],[11,"div_assign","","",39,[[]]],[11,"div_assign","","",39,[[]]],[11,"div_assign","","",40,[[]]],[11,"div_assign","","",40,[[]]],[11,"div_assign","","",41,[[]]],[11,"div_assign","","",41,[[]]],[11,"div_assign","","",42,[[]]],[11,"div_assign","","",42,[[]]],[11,"div_assign","","",43,[[]]],[11,"div_assign","","",43,[[]]],[11,"rem_assign","","",38,[[]]],[11,"rem_assign","","",38,[[]]],[11,"rem_assign","","",39,[[]]],[11,"rem_assign","","",39,[[]]],[11,"rem_assign","","",40,[[]]],[11,"rem_assign","","",40,[[]]],[11,"rem_assign","","",41,[[]]],[11,"rem_assign","","",41,[[]]],[11,"rem_assign","","",42,[[]]],[11,"rem_assign","","",42,[[]]],[11,"rem_assign","","",43,[[]]],[11,"rem_assign","","",43,[[]]],[11,"not","","",38,[[]]],[11,"not","","",39,[[]]],[11,"not","","",40,[[]]],[11,"not","","",41,[[]]],[11,"not","","",42,[[]]],[11,"not","","",43,[[]]],[11,"not","thermite","",49,[[]]],[11,"not","","",48,[[]]],[11,"bitand","thermite::backends::avx2","",38,[[]]],[11,"bitand","","",39,[[]]],[11,"bitand","","",40,[[]]],[11,"bitand","","",41,[[]]],[11,"bitand","","",42,[[]]],[11,"bitand","","",43,[[]]],[11,"bitand","thermite","",49,[[]]],[11,"bitand","","",48,[[]]],[11,"bitor","thermite::backends::avx2","",38,[[]]],[11,"bitor","","",39,[[]]],[11,"bitor","","",40,[[]]],[11,"bitor","","",41,[[]]],[11,"bitor","","",42,[[]]],[11,"bitor","","",43,[[]]],[11,"bitor","thermite","",49,[[]]],[11,"bitor","","",48,[[]]],[11,"bitxor","thermite::backends::avx2","",38,[[]]],[11,"bitxor","","",39,[[]]],[11,"bitxor","","",40,[[]]],[11,"bitxor","","",41,[[]]],[11,"bitxor","","",42,[[]]],[11,"bitxor","","",43,[[]]],[11,"bitxor","thermite","",49,[[]]],[11,"bitxor","","",48,[[]]],[11,"shl","thermite::backends::avx2","",38,[[]]],[11,"shl","","",38,[[["u32",15]]]],[11,"shl","","",39,[[]]],[11,"shl","","",39,[[["u32",15]]]],[11,"shl","","",40,[[]]],[11,"shl","","",40,[[["u32",15]]]],[11,"shl","","",41,[[]]],[11,"shl","","",41,[[["u32",15]]]],[11,"shl","","",42,[[]]],[11,"shl","","",42,[[["u32",15]]]],[11,"shl","","",43,[[]]],[11,"shl","","",43,[[["u32",15]]]],[11,"shr","","",38,[[]]],[11,"shr","","",38,[[["u32",15]]]],[11,"shr","","",39,[[]]],[11,"shr","","",39,[[["u32",15]]]],[11,"shr","","",40,[[]]],[11,"shr","","",40,[[["u32",15]]]],[11,"shr","","",41,[[]]],[11,"shr","","",41,[[["u32",15]]]],[11,"shr","","",42,[[]]],[11,"shr","","",42,[[["u32",15]]]],[11,"shr","","",43,[[]]],[11,"shr","","",43,[[["u32",15]]]],[11,"bitand_assign","","",38,[[]]],[11,"bitand_assign","","",38,[[]]],[11,"bitand_assign","","",39,[[]]],[11,"bitand_assign","","",39,[[]]],[11,"bitand_assign","","",40,[[]]],[11,"bitand_assign","","",40,[[]]],[11,"bitand_assign","","",41,[[]]],[11,"bitand_assign","","",41,[[]]],[11,"bitand_assign","","",42,[[]]],[11,"bitand_assign","","",42,[[]]],[11,"bitand_assign","","",43,[[]]],[11,"bitand_assign","","",43,[[]]],[11,"bitand_assign","thermite","",49,[[]]],[11,"bitand_assign","","",48,[[]]],[11,"bitor_assign","thermite::backends::avx2","",38,[[]]],[11,"bitor_assign","","",38,[[]]],[11,"bitor_assign","","",39,[[]]],[11,"bitor_assign","","",39,[[]]],[11,"bitor_assign","","",40,[[]]],[11,"bitor_assign","","",40,[[]]],[11,"bitor_assign","","",41,[[]]],[11,"bitor_assign","","",41,[[]]],[11,"bitor_assign","","",42,[[]]],[11,"bitor_assign","","",42,[[]]],[11,"bitor_assign","","",43,[[]]],[11,"bitor_assign","","",43,[[]]],[11,"bitor_assign","thermite","",49,[[]]],[11,"bitor_assign","","",48,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",38,[[]]],[11,"bitxor_assign","","",38,[[]]],[11,"bitxor_assign","","",39,[[]]],[11,"bitxor_assign","","",39,[[]]],[11,"bitxor_assign","","",40,[[]]],[11,"bitxor_assign","","",40,[[]]],[11,"bitxor_assign","","",41,[[]]],[11,"bitxor_assign","","",41,[[]]],[11,"bitxor_assign","","",42,[[]]],[11,"bitxor_assign","","",42,[[]]],[11,"bitxor_assign","","",43,[[]]],[11,"bitxor_assign","","",43,[[]]],[11,"bitxor_assign","thermite","",49,[[]]],[11,"bitxor_assign","","",48,[[]]],[11,"shl_assign","thermite::backends::avx2","",38,[[]]],[11,"shl_assign","","",38,[[["u32",15]]]],[11,"shl_assign","","",39,[[]]],[11,"shl_assign","","",39,[[["u32",15]]]],[11,"shl_assign","","",40,[[]]],[11,"shl_assign","","",40,[[["u32",15]]]],[11,"shl_assign","","",41,[[]]],[11,"shl_assign","","",41,[[["u32",15]]]],[11,"shl_assign","","",42,[[]]],[11,"shl_assign","","",42,[[["u32",15]]]],[11,"shl_assign","","",43,[[]]],[11,"shl_assign","","",43,[[["u32",15]]]],[11,"shr_assign","","",38,[[]]],[11,"shr_assign","","",38,[[["u32",15]]]],[11,"shr_assign","","",39,[[]]],[11,"shr_assign","","",39,[[["u32",15]]]],[11,"shr_assign","","",40,[[]]],[11,"shr_assign","","",40,[[["u32",15]]]],[11,"shr_assign","","",41,[[]]],[11,"shr_assign","","",41,[[["u32",15]]]],[11,"shr_assign","","",42,[[]]],[11,"shr_assign","","",42,[[["u32",15]]]],[11,"shr_assign","","",43,[[]]],[11,"shr_assign","","",43,[[["u32",15]]]],[11,"drop","thermite","",36,[[]]],[11,"hash","thermite::backends::avx1","",37,[[]]],[11,"hash","thermite::backends::avx2","",44,[[]]],[11,"hash","thermite::math","",3,[[]]],[11,"hash","thermite::math::policies","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"hash","thermite","",27,[[]]],[11,"next","thermite::iter","",57,[[],["option",4]]],[11,"size_hint","","",57,[[]]],[11,"next","","",58,[[],["option",4]]],[11,"size_hint","","",58,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"clone","thermite::backends::avx1","",37,[[],["avx1",3]]],[11,"clone","thermite::backends::avx2","",38,[[],["f32x8",3]]],[11,"clone","","",39,[[],["f64x8",3]]],[11,"clone","","",40,[[],["i32x8",3]]],[11,"clone","","",41,[[],["i64x8",3]]],[11,"clone","","",42,[[],["u32x8",3]]],[11,"clone","","",43,[[],["u64x8",3]]],[11,"clone","","",44,[[],["avx2",3]]],[11,"clone","thermite","",46,[[]]],[11,"clone","","",45,[[]]],[11,"clone","","",47,[[],["vptr",3]]],[11,"clone","","",48,[[],["mask",3]]],[11,"clone","","",49,[[]]],[11,"clone","thermite::math::compensated","",1,[[],["compensated",3]]],[11,"clone","thermite::math","",3,[[],["precisionpolicy",4]]],[11,"clone","thermite::math::policies","",50,[[],["extraprecision",3]]],[11,"clone","","",51,[[],["ultraperformance",3]]],[11,"clone","","",52,[[],["performance",3]]],[11,"clone","","",53,[[],["precision",3]]],[11,"clone","","",54,[[],["size",3]]],[11,"clone","","",55,[[],["reference",3]]],[11,"clone","thermite::rng::pcg32","",7,[[],["pcg32",3]]],[11,"clone","thermite::rng::xoshiro","",8,[[],["splitmix64",3]]],[11,"clone","","",9,[[],["xoshiro128plus",3]]],[11,"clone","","",10,[[],["xoshiro256plus",3]]],[11,"clone","thermite::iter","",58,[[]]],[11,"clone","","",59,[[]]],[11,"clone","thermite","",27,[[],["simdinstructionset",4]]],[11,"default","thermite::backends::avx2","",38,[[]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[]]],[11,"default","","",41,[[]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","thermite","",48,[[]]],[11,"alloc","","Allocates a new SIMD-aligned element buffer and zeroes …",36,[[["usize",15]]]],[11,"iter_vectors","","",36,[[],["simdsliceiter",3]]],[11,"iter_vectors_mut","","",36,[[],["alignedmutiter",3]]],[11,"gather","","Gathers values from the buffer using more efficient …",36,[[]]],[11,"fill","","Fills the buffer with vectors using aligned stores",36,[[]]],[11,"len","","",36,[[],["usize",15]]],[11,"len_vectors","","",36,[[],["usize",15]]],[11,"as_slice","","",36,[[]]],[11,"as_vector_slice","","",36,[[]]],[11,"as_mut_slice","","",36,[[]]],[11,"as_mut_vector_slice","","",36,[[]]],[11,"load_vector","","",36,[[["usize",15]]]],[11,"store_vector","","",36,[[["usize",15]]]],[11,"multiplier","","",45,[[]]],[11,"shift","","",45,[[],["u8",15]]],[11,"u8","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["u8",15]]]],[11,"u8","","See docs for [<code>Divider</code>]",45,[[["u8",15]]]],[11,"u8_branchfree","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",45,[[["u8",15]],[["branchfreedivider",3],["u8",15]]]],[11,"u16","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["u16",15]]]],[11,"u16","","See docs for [<code>Divider</code>]",45,[[["u16",15]]]],[11,"u16_branchfree","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",45,[[["u16",15]],[["branchfreedivider",3],["u16",15]]]],[11,"u32","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["u32",15]]]],[11,"u32","","See docs for [<code>Divider</code>]",45,[[["u32",15]]]],[11,"u32_branchfree","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",45,[[["u32",15]],[["u32",15],["branchfreedivider",3]]]],[11,"u64","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["u64",15]]]],[11,"u64","","See docs for [<code>Divider</code>]",45,[[["u64",15]]]],[11,"u64_branchfree","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",45,[[["u64",15]],[["branchfreedivider",3],["u64",15]]]],[11,"i8","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["i8",15]]]],[11,"i16","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["i16",15]]]],[11,"i32","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["i32",15]]]],[11,"i64","","See docs for [<code>BranchfreeDivider</code>] and [<code>Divider</code>]",46,[[["i64",15]]]],[11,"splat","","",47,[[]]],[11,"add","","",47,[[]]],[11,"is_null","","",47,[[],["mask",3]]],[11,"read","","",47,[[],["associatedvector",6]]],[11,"read_masked","","",47,[[["mask",3],["associatedvector",6]],["associatedvector",6]]],[11,"write","","",47,[[["associatedvector",6]]]],[11,"write_masked","","",47,[[["mask",3],["associatedvector",6]]]],[11,"truthy","","Create a bitmask for this vector type of all true bits",49,[[]]],[11,"falsey","","Create a bitmask with all false bits",49,[[]]],[11,"raw","","",49,[[],["u16",15]]],[11,"all","","Return true if all lanes for this vector type are set to …",49,[[],["bool",15]]],[11,"any","","Return true if any lane for this vector type is set to …",49,[[],["bool",15]]],[11,"none","","Return true if no lanes for this vector type are set to …",49,[[],["bool",15]]],[11,"count","","Count the number of set bits",49,[[],["u32",15]]],[11,"value","","",48,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",48,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",48,[[]]],[11,"from_value","","Creates a mask from a value. Any non-zero lanes are …",48,[[]]],[11,"cast_to","","",48,[[],[["mask",3],["simdfromcast",8]]]],[18,"FULL_BITMASK","","Bitmask indicating all truthy values for each lane",48,null],[11,"and_not","","Computes <code>!self & other</code> for each lane of the mask.",48,[[]]],[11,"bitmask","","Returns a bitmask that can be trivially evaluated to …",48,[[],["bitmask",3]]],[11,"from_bitmask","","Creates a wide SIMD mask from a single-bit bitmask",48,[[["u16",15]]]],[11,"all","","Returns <code>true</code> if all lanes are truthy",48,[[],["bool",15]]],[11,"any","","Returns <code>true</code> if any lanes are truthy",48,[[],["bool",15]]],[11,"none","","Returns <code>true</code> if all lanes are falsey",48,[[],["bool",15]]],[11,"count","","Counts the number of truthy lanes",48,[[],["u32",15]]],[11,"select","","For each lane, selects from <code>t</code> if the mask lane is truthy, …",48,[[]]],[11,"new_unchecked","thermite::iter","",56,[[]]],[11,"new","","",56,[[],["option",4]]],[11,"iter_mut","","",56,[[],["alignedmutiter",3]]],[11,"remainder","","Returns the remainder of the slice that is being iterated …",57,[[]]],[11,"new","","",58,[[]]],[11,"remainder","","Returns the remainder of the slice that is being iterated …",58,[[]]]],"p":[[8,"CastFrom"],[3,"Compensated"],[8,"Policy"],[4,"PrecisionPolicy"],[3,"PolicyParameters"],[8,"SimdVectorizedMathPolicied"],[8,"SimdVectorizedMath"],[3,"PCG32"],[3,"SplitMix64"],[3,"Xoshiro128Plus"],[3,"Xoshiro256Plus"],[8,"SimdRng"],[8,"SimdIteratorExt"],[8,"IntoSimdIterator"],[8,"SimdFromCast"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdShuffleIndices"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntoBits"],[8,"SimdFromBits"],[8,"SimdIntVector"],[8,"SimdUnsignedIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[4,"SimdInstructionSet"],[8,"Simd"],[8,"SimdAssociatedVector"],[3,"__m128"],[3,"__m128d"],[3,"__m128i"],[3,"__m256"],[3,"__m256d"],[3,"__m256i"],[3,"VectorBuffer"],[3,"AVX1"],[3,"f32x8"],[3,"f64x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"AVX2"],[3,"Divider"],[3,"BranchfreeDivider"],[3,"VPtr"],[3,"Mask"],[3,"BitMask"],[3,"ExtraPrecision"],[3,"UltraPerformance"],[3,"Performance"],[3,"Precision"],[3,"Size"],[3,"Reference"],[3,"AlignedMut"],[3,"AlignedMutIter"],[3,"SimdSliceIter"],[3,"SimdCastIter"]]},\
"thermite_complex":{"doc":"Complex Number Vectors","i":[[3,"Complex","thermite_complex","A vectorized (SoA) complex number in Cartesian form.",null,null],[12,"re","","Real part",0,null],[12,"im","","Imaginary part",0,null],[11,"new","","",0,[[]]],[11,"splat","","Creates a new Complex with all lanes of <code>re</code> and <code>im</code> set to …",0,[[]]],[11,"real","","Create a new Complex <code>a+0i</code>",0,[[]]],[11,"imag","","Create a new Complex <code>0+bi</code>",0,[[]]],[11,"i","","Returns imaginary unit",0,[[]]],[11,"neg_i","","Return negative imaginary unit",0,[[]]],[11,"one","","real(1)",0,[[]]],[11,"zero","","real(0)",0,[[]]],[11,"norm_sqr","","Returns the square of the norm",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"scale","","Multiplies <code>self</code> by the scalar <code>t</code>.",0,[[]]],[11,"unscale","","Divides <code>self</code> by the scalar <code>t</code>.",0,[[]]],[11,"conj","","Returns the complex conjugate. i.e. <code>re - i im</code>",0,[[]]],[11,"inv","","Returns <code>1/self</code>",0,[[]]],[11,"mul_add","","Returns <code>self * m + a</code>",0,[[]]],[11,"l1_norm","","Returns the L1 norm <code>|re| + |im|</code> -- the Manhattan distance …",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that …",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[]]],[11,"exp","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …",0,[[]]],[11,"ln","","Computes the principal value of natural logarithm of <code>self</code>.",0,[[]]],[11,"sqrt","","Computes the principal value of the square root of <code>self</code>.",0,[[]]],[11,"cbrt","","Computes the principal value of the cube root of <code>self</code>.",0,[[]]],[11,"powf","","Raises <code>self</code> to a floating point power.",0,[[]]],[11,"log","","Returns the logarithm of <code>self</code> with respect to an …",0,[[]]],[11,"powc","","Raises <code>self</code> to a complex power.",0,[[]]],[11,"expf","","Raises a floating point number to the complex power <code>self</code>.",0,[[]]],[11,"sin","","Computes the sine of <code>self</code>.",0,[[]]],[11,"cos","","Computes the cosine of <code>self</code>.",0,[[]]],[11,"tan","","Computes the tangent of <code>self</code>.",0,[[]]],[11,"asin","","Computes the principal value of the inverse sine of <code>self</code>.",0,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of <code>self</code>…",0,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of …",0,[[]]],[11,"sinh","","Computes the hyperbolic sine of <code>self</code>.",0,[[]]],[11,"cosh","","Computes the hyperbolic cosine of <code>self</code>.",0,[[]]],[11,"tanh","","Computes the hyperbolic tangent of <code>self</code>.",0,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine …",0,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine …",0,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic …",0,[[]]],[11,"finv","","Returns <code>1/self</code> using floating-point operations.",0,[[]]],[11,"fdiv","","Returns <code>self/other</code> using floating-point operations.",0,[[]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"clone","","",0,[[]]]],"p":[[3,"Complex"]]},\
"thermite_dispatch":{"doc":"","i":[[23,"dispatch","thermite_dispatch","Generates monomorphized backend <code>target_feature</code> function …",null,null]],"p":[]},\
"thermite_hyperdual":{"doc":"","i":[[6,"Hyperdual","thermite_hyperdual","",null,null],[6,"DuelNumber","","",null,null],[3,"HyperdualP","","",null,null],[12,"re","","",0,null],[12,"du","","",0,null],[11,"new","","",0,[[]]],[11,"real","","",0,[[]]],[11,"one","","",0,[[]]],[11,"zero","","",0,[[]]],[11,"map","","",0,[[]]],[11,"map_dual","","",0,[[]]],[11,"abs","","",0,[[]]],[11,"mul_add","","",0,[[]]],[11,"powi","","",0,[[["i32",15]]]],[11,"powf","","",0,[[]]],[11,"exp","","",0,[[]]],[11,"exp2","","",0,[[]]],[11,"ln","","",0,[[]]],[11,"sqrt","","",0,[[]]],[11,"cbrt","","",0,[[]]],[11,"sin_cos","","",0,[[]]],[11,"tan","","",0,[[]]],[11,"sinh_cosh","","",0,[[]]],[11,"tanh","","",0,[[]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"clone","","",0,[[]]]],"p":[[3,"HyperdualP"]]},\
"thermite_special":{"doc":"","i":[[8,"SimdVectorizedSpecialFunctionsPolicied","thermite_special","",null,null],[10,"hermite_p","","",0,[[["u32",15]]]],[10,"hermitev_p","","",0,[[]]],[10,"jacobi_p","","",0,[[["u32",15]]]],[10,"legendre_p","","",0,[[["u32",15]]]],[10,"tgamma_p","","",0,[[]]],[10,"lgamma_p","","",0,[[]]],[10,"digamma_p","","",0,[[]]],[10,"beta_p","","",0,[[]]],[8,"SimdVectorizedSpecialFunctions","","",null,null],[10,"tgamma","","Computes the Gamma function (<code>Γ(z)</code>) for any real input, …",1,[[]]],[10,"lgamma","","Computes the natural log of the Gamma function (<code>ln(Γ(x))</code>…",1,[[]]],[10,"digamma","","Computes the Digamma function <code>ψ(x)</code>, the first derivative …",1,[[]]],[10,"beta","","Computes the Beta function <code>Β(x, y)</code>",1,[[]]],[10,"hermite","","Computes the n-th degree physicists\' Hermite polynomial …",1,[[["u32",15]]]],[10,"hermitev","","Computes the n-th degree physicists\' Hermite polynomial …",1,[[]]],[10,"jacobi","","Computes the m-th derivative of the n-th degree Jacobi …",1,[[["u32",15]]]],[10,"legendre","","Computes the m-th associated n-th degree Legendre …",1,[[["u32",15]]]]],"p":[[8,"SimdVectorizedSpecialFunctionsPolicied"],[8,"SimdVectorizedSpecialFunctions"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);