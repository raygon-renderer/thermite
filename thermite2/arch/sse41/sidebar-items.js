initSidebarItems({"fn":[["_mm_blend_epi16","Blend packed 16-bit integers from `a` and `b` using the mask `IMM8`."],["_mm_blend_pd","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using control mask `IMM2`"],["_mm_blend_ps","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using mask `IMM4`"],["_mm_blendv_epi8","Blend packed 8-bit integers from `a` and `b` using `mask`"],["_mm_blendv_pd","Blend packed double-precision (64-bit) floating-point elements from `a` and `b` using `mask`"],["_mm_blendv_ps","Blend packed single-precision (32-bit) floating-point elements from `a` and `b` using `mask`"],["_mm_ceil_pd","Round the packed double-precision (64-bit) floating-point elements in `a` up to an integer value, and stores the results as packed double-precision floating-point elements."],["_mm_ceil_ps","Round the packed single-precision (32-bit) floating-point elements in `a` up to an integer value, and stores the results as packed single-precision floating-point elements."],["_mm_ceil_sd","Round the lower double-precision (64-bit) floating-point element in `b` up to an integer value, store the result as a double-precision floating-point element in the lower element of the intrisic result, and copies the upper element from `a` to the upper element of the intrinsic result."],["_mm_ceil_ss","Round the lower single-precision (32-bit) floating-point element in `b` up to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copies the upper 3 packed elements from `a` to the upper elements of the intrinsic result."],["_mm_cmpeq_epi64","Compares packed 64-bit integers in `a` and `b` for equality"],["_mm_cvtepi16_epi32","Sign extend packed 16-bit integers in `a` to packed 32-bit integers"],["_mm_cvtepi16_epi64","Sign extend packed 16-bit integers in `a` to packed 64-bit integers"],["_mm_cvtepi32_epi64","Sign extend packed 32-bit integers in `a` to packed 64-bit integers"],["_mm_cvtepi8_epi16","Sign extend packed 8-bit integers in `a` to packed 16-bit integers"],["_mm_cvtepi8_epi32","Sign extend packed 8-bit integers in `a` to packed 32-bit integers"],["_mm_cvtepi8_epi64","Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed 64-bit integers"],["_mm_cvtepu16_epi32","Zeroes extend packed unsigned 16-bit integers in `a` to packed 32-bit integers"],["_mm_cvtepu16_epi64","Zeroes extend packed unsigned 16-bit integers in `a` to packed 64-bit integers"],["_mm_cvtepu32_epi64","Zeroes extend packed unsigned 32-bit integers in `a` to packed 64-bit integers"],["_mm_cvtepu8_epi16","Zeroes extend packed unsigned 8-bit integers in `a` to packed 16-bit integers"],["_mm_cvtepu8_epi32","Zeroes extend packed unsigned 8-bit integers in `a` to packed 32-bit integers"],["_mm_cvtepu8_epi64","Zeroes extend packed unsigned 8-bit integers in `a` to packed 64-bit integers"],["_mm_dp_pd","Returns the dot product of two __m128d vectors."],["_mm_dp_ps","Returns the dot product of two __m128 vectors."],["_mm_extract_epi32","Extracts an 32-bit integer from `a` selected with `IMM8`"],["_mm_extract_epi64","Extracts an 64-bit integer from `a` selected with `IMM1`"],["_mm_extract_epi8","Extracts an 8-bit integer from `a`, selected with `IMM8`. Returns a 32-bit integer containing the zero-extended integer data."],["_mm_extract_ps","Extracts a single-precision (32-bit) floating-point element from `a`, selected with `IMM8`"],["_mm_floor_pd","Round the packed double-precision (64-bit) floating-point elements in `a` down to an integer value, and stores the results as packed double-precision floating-point elements."],["_mm_floor_ps","Round the packed single-precision (32-bit) floating-point elements in `a` down to an integer value, and stores the results as packed single-precision floating-point elements."],["_mm_floor_sd","Round the lower double-precision (64-bit) floating-point element in `b` down to an integer value, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copies the upper element from `a` to the upper element of the intrinsic result."],["_mm_floor_ss","Round the lower single-precision (32-bit) floating-point element in `b` down to an integer value, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copies the upper 3 packed elements from `a` to the upper elements of the intrinsic result."],["_mm_insert_epi32","Returns a copy of `a` with the 32-bit integer from `i` inserted at a location specified by `IMM8`."],["_mm_insert_epi64","Returns a copy of `a` with the 64-bit integer from `i` inserted at a location specified by `IMM1`."],["_mm_insert_epi8","Returns a copy of `a` with the 8-bit integer from `i` inserted at a location specified by `IMM8`."],["_mm_insert_ps","Select a single value in `a` to store at some position in `b`, Then zero elements according to `IMM8`."],["_mm_max_epi32","Compares packed 32-bit integers in `a` and `b`, and returns packed maximum values."],["_mm_max_epi8","Compares packed 8-bit integers in `a` and `b` and returns packed maximum values in dst."],["_mm_max_epu16","Compares packed unsigned 16-bit integers in `a` and `b`, and returns packed maximum."],["_mm_max_epu32","Compares packed unsigned 32-bit integers in `a` and `b`, and returns packed maximum values."],["_mm_min_epi32","Compares packed 32-bit integers in `a` and `b`, and returns packed minimum values."],["_mm_min_epi8","Compares packed 8-bit integers in `a` and `b` and returns packed minimum values in dst."],["_mm_min_epu16","Compares packed unsigned 16-bit integers in `a` and `b`, and returns packed minimum."],["_mm_min_epu32","Compares packed unsigned 32-bit integers in `a` and `b`, and returns packed minimum values."],["_mm_minpos_epu16","Finds the minimum unsigned 16-bit element in the 128-bit __m128i vector, returning a vector containing its value in its first position, and its index in its second position; all other elements are set to zero."],["_mm_mpsadbw_epu8","Subtracts 8-bit unsigned integer values and computes the absolute values of the differences to the corresponding bits in the destination. Then sums of the absolute differences are returned according to the bit fields in the immediate operand."],["_mm_mul_epi32","Multiplies the low 32-bit integers from each packed 64-bit element in `a` and `b`, and returns the signed 64-bit result."],["_mm_mullo_epi32","Multiplies the packed 32-bit integers in `a` and `b`, producing intermediate 64-bit integers, and returns the lowest 32-bit, whatever they might be, reinterpreted as a signed integer. While `pmulld __m128i::splat(2), __m128i::splat(2)` returns the obvious `__m128i::splat(4)`, due to wrapping arithmetic `pmulld __m128i::splat(i32::MAX), __m128i::splat(2)` would return a negative number."],["_mm_packus_epi32","Converts packed 32-bit integers from `a` and `b` to packed 16-bit integers using unsigned saturation"],["_mm_round_pd","Round the packed double-precision (64-bit) floating-point elements in `a` using the `ROUNDING` parameter, and stores the results as packed double-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:"],["_mm_round_ps","Round the packed single-precision (32-bit) floating-point elements in `a` using the `ROUNDING` parameter, and stores the results as packed single-precision floating-point elements. Rounding is done according to the rounding parameter, which can be one of:"],["_mm_round_sd","Round the lower double-precision (64-bit) floating-point element in `b` using the `ROUNDING` parameter, store the result as a double-precision floating-point element in the lower element of the intrinsic result, and copies the upper element from `a` to the upper element of the intrinsic result. Rounding is done according to the rounding parameter, which can be one of:"],["_mm_round_ss","Round the lower single-precision (32-bit) floating-point element in `b` using the `ROUNDING` parameter, store the result as a single-precision floating-point element in the lower element of the intrinsic result, and copies the upper 3 packed elements from `a` to the upper elements of the instrinsic result. Rounding is done according to the rounding parameter, which can be one of:"],["_mm_test_all_ones","Tests whether the specified bits in `a` 128-bit integer vector are all ones."],["_mm_test_all_zeros","Tests whether the specified bits in a 128-bit integer vector are all zeros."],["_mm_test_mix_ones_zeros","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones."],["_mm_testc_si128","Tests whether the specified bits in a 128-bit integer vector are all ones."],["_mm_testnzc_si128","Tests whether the specified bits in a 128-bit integer vector are neither all zeros nor all ones."],["_mm_testz_si128","Tests whether the specified bits in a 128-bit integer vector are all zeros."]]});